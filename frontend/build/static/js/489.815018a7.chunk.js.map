{"version":3,"file":"static/js/489.815018a7.chunk.js","mappings":"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","sources":["pages/TodoListsPage/styles.ts","pages/TodoListsPage/components/TodoListsContainer/SortableTodoListCard.tsx","pages/TodoListsPage/components/TodoListsContainer/useHandleDrag.ts","pages/TodoListsPage/components/TodoListsContainer/index.tsx","pages/TodoListsPage/components/TodoListsLoader/index.tsx","pages/TodoListsPage/components/TopPanel/styles.ts","pages/TodoListsPage/components/TopPanel/index.tsx","pages/TodoListsPage/index.tsx"],"sourcesContent":["import { styled } from \"@mui/material\";\n\nexport const StyledTodoListsPageWrapper = styled(\"main\")(({ theme }) => ({\n  position: \"absolute\",\n  width: \"100%\",\n  top: 15,\n  padding: \"0 15px\",\n  [theme.breakpoints.up(\"sm\")]: {\n    padding: \"0 50px\",\n  },\n}));\n\nexport const StyledTodoListsWrapper = styled(\"section\", {\n  shouldForwardProp: (prop) => prop !== \"columns\",\n})<{ columns: number }>(({ columns }) => ({\n  display: \"grid\",\n  gridTemplateColumns: `repeat(${columns}, 1fr)`,\n  gridGap: 20,\n  maxWidth: \"1000px\",\n  margin: \"50px auto\",\n  \"& > div > div\": {\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    \"& > div:nth-child(2)\": {\n      height: \"100%\",\n    },\n  },\n}));\n","import {\n  AnimateLayoutChanges,\n  defaultAnimateLayoutChanges,\n  useSortable,\n} from \"@dnd-kit/sortable\";\nimport { CSS } from \"@dnd-kit/utilities\";\nimport { IExtendedTodoListDto } from \"linked-models/todoList/todoList.dto\";\nimport TodoListCard from \"pages/SingleTodoListPage/components/TodoListCard\";\nimport { StyledTodoListCardWrapper } from \"pages/SingleTodoListPage/components/TodoListCard/styles\";\nimport { memo } from \"react\";\n\nconst animateLayoutChanges: AnimateLayoutChanges = (args) => {\n  const { isSorting, wasDragging } = args;\n\n  if (isSorting || wasDragging) {\n    return defaultAnimateLayoutChanges(args);\n  }\n\n  return true;\n};\n\ninterface Props {\n  todoList: IExtendedTodoListDto;\n  withShakeAnimation?: boolean;\n}\n\nconst SortableTodoListCard = ({\n  todoList,\n  withShakeAnimation,\n}: Props): JSX.Element => {\n  const {\n    isDragging,\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n  } = useSortable({ id: todoList.id, animateLayoutChanges });\n\n  return (\n    <StyledTodoListCardWrapper\n      isDragging={isDragging}\n      ref={setNodeRef}\n      transition={transition}\n      transform={CSS.Transform.toString(transform)}\n    >\n      <TodoListCard\n        todoList={todoList}\n        withShakeAnimation={withShakeAnimation}\n        draggingProps={{ listeners, attributes, isDragging }}\n        actionsVariant=\"menu\"\n      />\n    </StyledTodoListCardWrapper>\n  );\n};\n\nexport default memo(SortableTodoListCard);\n","import { DragEndEvent, DragStartEvent } from \"@dnd-kit/core\";\nimport { arrayMove } from \"@dnd-kit/sortable\";\nimport { IExtendedTodoListDto } from \"linked-models/todoList/todoList.dto\";\nimport { IUserAttached } from \"linked-models/user/user.model\";\nimport { SetStateAction, useCallback } from \"react\";\nimport { getTodoListsOrderLSKey } from \"./helpers\";\n\ninterface Args {\n  setOrderedTodoLists: (value: SetStateAction<IExtendedTodoListDto[]>) => void;\n  setActiveId: (value: SetStateAction<string | null>) => void;\n  currentUser: IUserAttached | undefined;\n}\n\nconst useHandleDrag = ({\n  setActiveId,\n  setOrderedTodoLists,\n  currentUser,\n}: Args) => {\n  const handleDragStart = useCallback(\n    (event: DragStartEvent) => {\n      setActiveId(event.active.id as string);\n    },\n    [setActiveId]\n  );\n\n  const handleDragEnd = useCallback(\n    (event: DragEndEvent) => {\n      const { active, over } = event;\n\n      if (active.id !== over?.id) {\n        setOrderedTodoLists((items) => {\n          const oldIndex = items.findIndex((i) => i.id === active.id);\n          const newIndex = items.findIndex((i) => i.id === over?.id);\n\n          if (newIndex !== -1) {\n            const reorderedItems = arrayMove(items, oldIndex, newIndex);\n            if (currentUser)\n              localStorage.setItem(\n                getTodoListsOrderLSKey(currentUser?.id),\n                JSON.stringify(reorderedItems.map((todoList) => todoList.id))\n              );\n            return reorderedItems;\n          }\n\n          return items;\n        });\n      }\n\n      setActiveId(null);\n    },\n    [currentUser, setActiveId, setOrderedTodoLists]\n  );\n\n  const handleDragCancel = useCallback(() => {\n    setActiveId(null);\n  }, [setActiveId]);\n\n  return { handleDragStart, handleDragEnd, handleDragCancel };\n};\n\nexport default useHandleDrag;\n","import {\n  closestCenter,\n  DndContext,\n  DragOverlay,\n  MeasuringStrategy,\n  MouseSensor,\n  TouchSensor,\n  useSensor,\n  useSensors,\n} from \"@dnd-kit/core\";\nimport { rectSortingStrategy, SortableContext } from \"@dnd-kit/sortable\";\nimport { useMediaQuery, useTheme } from \"@mui/material\";\nimport { useCurrentUser } from \"framework/authentication/useCurrentUser\";\nimport { IExtendedTodoListDto } from \"linked-models/todoList/todoList.dto\";\nimport { StyledTodoListsWrapper } from \"pages/TodoListsPage/styles\";\nimport { memo, useEffect, useState } from \"react\";\nimport TodoListCard from \"../../../SingleTodoListPage/components/TodoListCard\";\nimport { getOrderedTodoLists } from \"./helpers\";\nimport SortableTodoListCard from \"./SortableTodoListCard\";\nimport useHandleDrag from \"./useHandleDrag\";\n\ninterface Props {\n  todoLists: IExtendedTodoListDto[];\n}\n\nconst TodoListsContainer = ({ todoLists }: Props): JSX.Element => {\n  const [activeId, setActiveId] = useState<string | null>(null);\n  const sensors = useSensors(useSensor(MouseSensor), useSensor(TouchSensor));\n  const { currentUser } = useCurrentUser();\n  const [orderedTodoLists, setOrderedTodoLists] = useState<\n    IExtendedTodoListDto[]\n  >(getOrderedTodoLists(todoLists, currentUser?.id));\n\n  useEffect(() => {\n    setOrderedTodoLists(getOrderedTodoLists(todoLists, currentUser?.id));\n  }, [todoLists, currentUser?.id]);\n\n  const theme = useTheme();\n  const isSmallScreen = useMediaQuery(theme.breakpoints.up(\"md\"));\n  const isLargeScreen = useMediaQuery(theme.breakpoints.up(\"xl\"));\n  let columns = 1;\n  if (isSmallScreen) columns = 2;\n  if (isLargeScreen) columns = 3;\n\n  const activeTodoList = todoLists.find((td) => td.id === activeId);\n\n  const { handleDragStart, handleDragEnd, handleDragCancel } = useHandleDrag({\n    setActiveId,\n    setOrderedTodoLists,\n    currentUser,\n  });\n\n  return (\n    <DndContext\n      measuring={{\n        droppable: {\n          strategy: MeasuringStrategy.Always,\n        },\n      }}\n      sensors={sensors}\n      collisionDetection={closestCenter}\n      onDragStart={handleDragStart}\n      onDragEnd={handleDragEnd}\n      onDragCancel={handleDragCancel}\n    >\n      <SortableContext items={orderedTodoLists} strategy={rectSortingStrategy}>\n        <StyledTodoListsWrapper columns={columns}>\n          {orderedTodoLists.map((td) => {\n            return (\n              <SortableTodoListCard\n                key={td.id}\n                todoList={td}\n                withShakeAnimation={!!activeId && activeId !== td.id}\n              />\n            );\n          })}\n        </StyledTodoListsWrapper>\n      </SortableContext>\n      <DragOverlay adjustScale style={{ transformOrigin: \"0 0 \" }}>\n        {activeId && activeTodoList ? (\n          <TodoListCard todoList={activeTodoList} actionsVariant=\"menu\" />\n        ) : null}\n      </DragOverlay>\n    </DndContext>\n  );\n};\n\nexport default memo(TodoListsContainer);\n","import { Grid, Skeleton } from \"@mui/material\";\n\nexport const TodoListsLoader = (): JSX.Element => {\n  return (\n    <Grid container spacing={5}>\n      {Array.from(\n        { length: 6 },\n        () => Math.floor(Math.random() * (220 - 180 + 1)) + 180\n      ).map((height, index) => (\n        <Grid key={index} item xs={12} md={6} lg={4}>\n          <Skeleton height={`${height}px`} />\n        </Grid>\n      ))}\n    </Grid>\n  );\n};\n","import { styled, Typography } from \"@mui/material\";\n\nexport const StyledWrapper = styled(\"div\")({\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  marginTop: \"2rem\",\n});\n\nexport const StyledHeader = styled(Typography)(({ theme }) => ({\n  color: theme.palette.primary.contrastText,\n}));\n","import { Button } from \"atomicComponents/atoms/Button\";\nimport { useDialogs } from \"framework/dialogs\";\nimport { TranslationKeys } from \"framework/translations/translatedTexts/translationKeys\";\nimport { memo } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { StyledWrapper } from \"./styles\";\n\nconst TopPanel = (): JSX.Element => {\n  const { dialogsActions } = useDialogs();\n  const { t } = useTranslation();\n\n  const handleOpenCreateTodoListDialog = () => {\n    dialogsActions.updateTodoListDialog({ visible: true });\n  };\n\n  return (\n    <StyledWrapper>\n      <Button onClick={handleOpenCreateTodoListDialog}>\n        {t(TranslationKeys.CreateNewTodoList)}\n      </Button>\n    </StyledWrapper>\n  );\n};\n\nexport default memo(TopPanel);\n","import { TranslationKeys } from \"framework/translations/translatedTexts/translationKeys\";\nimport { memo, useLayoutEffect, useMemo } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport EmptyTodoLists from \"./components/EmptyTodoLists\";\nimport TodoListsContainer from \"./components/TodoListsContainer\";\nimport { TodoListsLoader } from \"./components/TodoListsLoader\";\nimport TopPanel from \"./components/TopPanel\";\nimport { useGetUserExtendedTodoListsQuery } from \"./queries/getUserExtendedTodoLists.query\";\nimport { StyledTodoListsPageWrapper } from \"./styles\";\n\nconst TodoListsPage = (): JSX.Element => {\n  const { t } = useTranslation();\n  const getUserTodoListsWithTasksQuery = useGetUserExtendedTodoListsQuery();\n\n  useLayoutEffect(() => {\n    const title = `${t(TranslationKeys.PageTitleMain)} - ${t(\n      TranslationKeys.PageTitleTodoLists\n    )}`;\n    document.title = title;\n  }, []);\n\n  const pageContent = useMemo(() => {\n    let pageContent = null;\n\n    if (getUserTodoListsWithTasksQuery.isLoading)\n      pageContent = <TodoListsLoader />;\n    else if (\n      getUserTodoListsWithTasksQuery.isFetched &&\n      !!getUserTodoListsWithTasksQuery.data?.length\n    ) {\n      pageContent = (\n        <TodoListsContainer\n          todoLists={getUserTodoListsWithTasksQuery.data || []}\n        />\n      );\n    } else {\n      pageContent = <EmptyTodoLists />;\n    }\n\n    return pageContent;\n  }, [\n    getUserTodoListsWithTasksQuery.data,\n    getUserTodoListsWithTasksQuery.isFetched,\n    getUserTodoListsWithTasksQuery.isLoading,\n  ]);\n\n  return (\n    <StyledTodoListsPageWrapper>\n      <TopPanel />\n      {pageContent}\n    </StyledTodoListsPageWrapper>\n  );\n};\n\nexport default memo(TodoListsPage);\n"],"names":["StyledTodoListsPageWrapper","styled","_ref","theme","_defineProperty","position","width","top","padding","breakpoints","up","StyledTodoListsWrapper","shouldForwardProp","prop","_ref3","columns","display","gridTemplateColumns","concat","gridGap","maxWidth","margin","height","flexDirection","animateLayoutChanges","args","isSorting","wasDragging","defaultAnimateLayoutChanges","SortableTodoListCard","todoList","withShakeAnimation","_useSortable","useSortable","id","isDragging","attributes","listeners","setNodeRef","transform","transition","_jsx","StyledTodoListCardWrapper","ref","CSS","Transform","toString","children","TodoListCard","draggingProps","actionsVariant","memo","setActiveId","setOrderedTodoLists","currentUser","handleDragStart","useCallback","event","active","handleDragEnd","over","items","oldIndex","findIndex","i","newIndex","reorderedItems","arrayMove","localStorage","setItem","getTodoListsOrderLSKey","JSON","stringify","map","handleDragCancel","TodoListsContainer","todoLists","_useState","useState","_useState2","_slicedToArray","activeId","sensors","useSensors","useSensor","MouseSensor","TouchSensor","useCurrentUser","_useState3","getOrderedTodoLists","_useState4","orderedTodoLists","useEffect","useTheme","useMediaQuery","activeTodoList","find","td","_useHandleDrag","useHandleDrag","_jsxs","DndContext","measuring","droppable","strategy","MeasuringStrategy","Always","collisionDetection","closestCenter","onDragStart","onDragEnd","onDragCancel","SortableContext","rectSortingStrategy","DragOverlay","adjustScale","style","transformOrigin","TodoListsLoader","Grid","container","spacing","Array","from","length","Math","floor","random","index","item","xs","md","lg","Skeleton","StyledWrapper","alignItems","justifyContent","marginTop","TopPanel","Typography","color","palette","primary","contrastText","dialogsActions","useDialogs","t","useTranslation","Button","onClick","updateTodoListDialog","visible","TranslationKeys","CreateNewTodoList","TodoListsPage","getUserTodoListsWithTasksQuery","useGetUserExtendedTodoListsQuery","useLayoutEffect","title","PageTitleMain","PageTitleTodoLists","document","pageContent","useMemo","_getUserTodoListsWith","isLoading","isFetched","data","EmptyTodoLists"],"sourceRoot":""}