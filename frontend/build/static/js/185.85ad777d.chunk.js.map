{"version":3,"file":"static/js/185.85ad777d.chunk.js","mappings":"mXAUMA,EAAwB,SAAHC,GAAyC,IAAnCC,EAAOD,EAAPC,QACzBC,GAAQC,EAAAA,EAAAA,MACd,OACEC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEF,EAAAA,EAAAA,KAACG,EAAAA,EAAQ,CACPC,GAAIN,EAAc,OAClBO,QAAQ,OACRC,MAAO,CAAEC,UAAW,SAAUL,UAE9BF,EAAAA,EAAAA,KAACQ,EAAAA,EAAU,CAACX,QAASA,OAI7B,EAEA,GAAeY,EAAAA,EAAAA,MAAKd,G,sBCvBPe,GAA0BC,E,SAAAA,IAAO,MAAPA,CAAc,CACnDC,QAAS,SCkBLC,EAAa,WAAoB,IAADC,EAAAC,EACpCC,GAKIC,EAAAA,EAAAA,KAAYC,EAAAF,EAJdG,aACEC,WAAcC,EAAYH,EAAZG,aAAcC,EAAUJ,EAAVI,WAAYC,EAAOL,EAAPK,QAExBC,EAAgBR,EAAlCS,eAAkBD,iBAGdE,GAAUC,EAAAA,EAAAA,QAAgC,MAEhDC,GAAwBC,EAAAA,EAAAA,GAAkBN,GAAS,kBACjDC,EAAiBM,EAAAA,GAAkB,IACpCC,GAAAC,EAAAA,EAAAA,GAAAJ,EAAA,GAFMK,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GAIdI,GACQ,OAAZd,QAAY,IAAZA,OAAY,EAAZA,EAAce,cACdC,EAAAA,EAAAA,GACE,IAAIC,KAAiB,OAAZjB,QAAY,IAAZA,OAAY,EAAZA,EAAce,aACX,OAAZf,QAAY,IAAZA,OAAY,EAAZA,EAAckB,YAAa,IAAID,KAAiB,OAAZjB,QAAY,IAAZA,OAAY,EAAZA,EAAckB,YACtC,OAAZlB,QAAY,IAAZA,OAAY,EAAZA,EAAcmB,aAAc,IAAIF,KAAiB,OAAZjB,QAAY,IAAZA,OAAY,EAAZA,EAAcmB,aAGjDC,EAAoB,CACxBC,MAAkB,OAAZrB,QAAY,IAAZA,OAAY,EAAZA,EAAcqB,OAAQ,GAC5BH,UAAuB,OAAZlB,QAAY,IAAZA,OAAY,EAAZA,EAAckB,UACzBC,YAAwB,OAAZnB,QAAY,IAAZA,OAAY,EAAZA,EAAcmB,aAAc,KACxCG,0BACsB,OAApBR,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBQ,2BAA4B,GACpDC,eAAmC,OAApBT,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBS,gBAAiB,SACtDC,WAA+B,OAApBV,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBU,YAAa,QAC9CT,YAAwB,OAAZf,QAAY,IAAZA,OAAY,EAAZA,EAAce,aAAc,IAAIE,KAAKA,KAAKQ,MAAQ,OAC9DC,UAAuB,OAAZ1B,QAAY,IAAZA,OAAY,EAAZA,EAAc0B,UACzBC,SAAsB,OAAZ3B,QAAY,IAAZA,IAAAA,EAAce,aAGpBa,GAAUC,EAAAA,EAAAA,IAAqB,CACnCC,cAAeV,IAGXW,GAAqBC,EAAAA,EAAAA,KACrBC,GAAmBC,EAAAA,EAAAA,KACjBC,GAAMC,EAAAA,EAAAA,MAAND,EAWAE,EAAoCT,EAApCS,aAAc7D,EAAsBoD,EAAtBpD,QAAS8D,EAAaV,EAAbU,SAM/B,OAJAC,EAAAA,EAAAA,YAAU,WACRD,EAAS,OACX,GAAG,CAACA,KAGF3D,EAAAA,EAAAA,KAAC6D,EAAAA,EAAM,CAAC5B,KAAMA,EAAMC,QAASA,EAAQhC,UACnCF,EAAAA,EAAAA,KAAC8D,EAAAA,IAAYC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAKd,GAAO,IAAA/C,UACvB8D,EAAAA,EAAAA,MAACC,EAAAA,GAAU,CAACC,SAAUR,GAlBX,SAACS,GACXA,EAAKnB,SAAQmB,EAAK/B,WAAa,MAEhCf,EACFiC,EAAiBc,OAAO,CAAE9C,WAAAA,EAAY+C,OAAQhD,EAAaiD,GAAIH,KAAAA,IAC5Df,EAAmBgB,OAAO,CAAE9C,WAAAA,EAAY6C,KAAAA,IAC7CjC,GACF,IAWmDhC,SAAA,EAC3CF,EAAAA,EAAAA,KAACuE,EAAAA,EAAU,CAACC,QAAQ,KAAItE,SACrBmB,EAAY,GAAAoD,OACNjB,EAAEkB,EAAAA,EAAgBC,UAAS,MAAAF,OAAKpD,EAAaqB,MAChDc,EAAEkB,EAAAA,EAAgBE,YAExB5E,EAAAA,EAAAA,KAAC6E,EAAAA,EAAmB,CAClBC,WAAS,EACTC,IAAKrD,EACLsD,KAAM,OACNC,QAAiC,QAAzBnE,EAACmC,EAAQiC,UAAUC,cAAM,IAAArE,IAAxBA,EAA0B4B,MACnC0C,WAC0C,cAAX,QAA7BrE,EAAAkC,EAAQiC,UAAUC,OAAOzC,YAAI,IAAA3B,OAAA,EAA7BA,EAA+BsE,OAC/B7B,EAAEkB,EAAAA,EAAgBY,eAEpBzF,QAASA,EACT0F,YAAa/B,EAAEkB,EAAAA,EAAgBc,aAEjCxF,EAAAA,EAAAA,KAACyF,EAAAA,EAAY,KAEbzB,EAAAA,EAAAA,MAACtD,EAAuB,CAAAR,SAAA,EACtBF,EAAAA,EAAAA,KAAC0F,EAAAA,EAAkB,CACjBV,KAAM,SACNnF,QAASA,EACT8F,MAAOnC,EAAEkB,EAAAA,EAAgBkB,aAE3B5F,EAAAA,EAAAA,KAAC0F,EAAAA,EAAkB,CACjBV,KAAM,YACNnF,QAASA,EACT8F,MAAOnC,EAAEkB,EAAAA,EAAgBmB,qBAG7B7F,EAAAA,EAAAA,KAACL,EAAqB,CAACE,QAASoD,EAAQpD,WACxCG,EAAAA,EAAAA,KAAC8F,EAAAA,EAAM,CAACT,KAAK,SAAQnF,SAEfsD,EADHnC,EACKqD,EAAAA,EAAgBqB,KAChBrB,EAAAA,EAAgBE,kBAMlC,EAEA,GAAenE,EAAAA,EAAAA,MAAKI,E,oJCjHPwC,EAAwB,WACnC,IAAM2C,GAAiCC,EAAAA,EAAAA,KAEjCC,EAAoB,eAAAtG,GAAAuG,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAOhF,EAAoB6C,GAAW,IAAAoC,EAAA,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACP,OAApDJ,GAAMK,EAAAA,EAAAA,IAAaC,EAAAA,EAAAA,IAAoBvF,IAAYmF,EAAAK,OAAA,UAClDC,EAAAA,EAAAA,IACLR,GACAS,EAAAA,EAAAA,GAAwB7C,IACxB8C,MAAK,SAACC,GAAG,OAAKA,EAAI/C,IAAI,KAAC,wBAAAsC,EAAAU,OAAA,GAAAb,EAAA,KAC1B,gBANyBc,EAAAC,GAAA,OAAAzH,EAAA0H,MAAA,KAAAC,UAAA,KAQ1B,OAAOC,EAAAA,EAAAA,IACL,SAAAC,GAAA,IAAGnG,EAAUmG,EAAVnG,WAAY6C,EAAIsD,EAAJtD,KAAI,OACjB+B,EAAqB5E,EAAY6C,EAAK,GACxC,CACEuD,UAAW1B,GAGjB,C,gJCvBazC,EAAgC,WAC3C,IAAMoE,GAAgCC,EAAAA,EAAAA,KAEhCC,EAAkB,eAAAJ,GAAAtB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAA1G,GAAA,IAAA0B,EAAA+C,EAAAF,EAAA,OAAAiC,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAGrB,OAFJrF,EAAU1B,EAAV0B,WACA+C,EAAMzE,EAANyE,OACAF,EAAIvE,EAAJuE,KAAIsC,EAAAK,OAAA,UAMGgB,EAAAA,EAAAA,KACLlB,EAAAA,EAAAA,IAAamB,EAAAA,EAAAA,IAAmBzG,EAAY+C,KAC5C2C,EAAAA,EAAAA,GAAwB7C,IACxB8C,MAAK,SAACC,GAAG,OAAKA,EAAI/C,IAAI,KAAC,wBAAAsC,EAAAU,OAAA,GAAAb,EAAA,KAC1B,gBAbuBc,GAAA,OAAAK,EAAAH,MAAA,KAAAC,UAAA,KAexB,OAAOC,EAAAA,EAAAA,GAAYK,EAAoB,CACrCH,UAAWC,GAEf,C","sources":["framework/dialogs/components/TaskDialog/components/CollapsableNotifyForm.tsx","framework/dialogs/components/TaskDialog/styles.ts","framework/dialogs/components/TaskDialog/index.tsx","pages/SingleTodoListPage/mutations/createTask/createTask.mutation.ts","pages/SingleTodoListPage/mutations/editTask/editTask.mutation.ts"],"sourcesContent":["import { Collapse } from \"@mui/material\";\nimport { memo } from \"react\";\nimport { Control, useWatch } from \"react-hook-form\";\nimport { ITaskDialog } from \"../models/taskDialog.model\";\nimport NotifyForm from \"./NotifyForm\";\n\ninterface Props {\n  control: Control<ITaskDialog, any>;\n}\n\nconst CollapsableNotifyForm = ({ control }: Props): JSX.Element => {\n  const watch = useWatch<ITaskDialog>();\n  return (\n    <>\n      <Collapse\n        in={watch[\"notify\"]}\n        timeout=\"auto\"\n        style={{ minHeight: \"unset\" }}\n      >\n        <NotifyForm control={control} />\n      </Collapse>\n    </>\n  );\n};\n\nexport default memo(CollapsableNotifyForm);\n","import { styled } from \"@mui/material\";\n\nexport const StyledCheckboxesWrapper = styled(\"div\")({\n  display: \"flex\",\n});\n","import { Typography } from \"@mui/material\";\nimport { Button } from \"atomicComponents/atoms/Button\";\nimport Dialog from \"atomicComponents/atoms/Dialog\";\nimport { ControlledCheckbox } from \"atomicComponents/molecules/ControlledCheckbox\";\nimport { ControlledTextField } from \"atomicComponents/molecules/ControlledInputText\";\nimport { useDialogs } from \"framework/dialogs\";\nimport useAppDialogState from \"framework/dialogs/hooks/useAppDialogState\";\nimport { initialTaskDialog } from \"framework/dialogs/models/initialState.const\";\nimport { TranslationKeys } from \"framework/translations/translatedTexts/translationKeys\";\nimport { useCreateTaskMutation } from \"pages/SingleTodoListPage/mutations/createTask/createTask.mutation\";\nimport { useEditTaskInTodoListMutation } from \"pages/SingleTodoListPage/mutations/editTask/editTask.mutation\";\nimport { memo, useEffect, useRef } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { StyledForm } from \"../TodoListDialog/styles\";\nimport CollapsableNotifyForm from \"./components/CollapsableNotifyForm\";\nimport DatesPickers from \"./components/DatesPickers\";\nimport { createNotifySelectParams } from \"./components/NotifyForm/helpers\";\nimport { ITaskDialog } from \"./models/taskDialog.model\";\nimport { StyledCheckboxesWrapper } from \"./styles\";\n\nconst TaskDialog = (): JSX.Element => {\n  const {\n    dialogsState: {\n      taskDialog: { editTaskData, todoListId, visible },\n    },\n    dialogsActions: { updateTaskDialog },\n  } = useDialogs();\n\n  const taskRef = useRef<HTMLInputElement | null>(null);\n\n  const [open, onClose] = useAppDialogState(visible, () =>\n    updateTaskDialog(initialTaskDialog)\n  );\n\n  const defaultSelectsValues =\n    editTaskData?.notifyDate &&\n    createNotifySelectParams(\n      new Date(editTaskData?.notifyDate),\n      editTaskData?.startDate && new Date(editTaskData?.startDate),\n      editTaskData?.finishDate && new Date(editTaskData?.finishDate)\n    );\n\n  const defaultFormValues = {\n    text: editTaskData?.text || \"\",\n    startDate: editTaskData?.startDate,\n    finishDate: editTaskData?.finishDate || null,\n    minsAccordingToTimePoint:\n      defaultSelectsValues?.minsAccordingToTimePoint || 15,\n    beforeOrAfter: defaultSelectsValues?.beforeOrAfter || \"Before\",\n    timePoint: defaultSelectsValues?.timePoint || \"Start\",\n    notifyDate: editTaskData?.notifyDate || new Date(Date.now() + 85500000),\n    important: editTaskData?.important,\n    notify: !!editTaskData?.notifyDate,\n  };\n\n  const methods = useForm<ITaskDialog>({\n    defaultValues: defaultFormValues,\n  });\n\n  const createTaskMutation = useCreateTaskMutation();\n  const editTaskMutation = useEditTaskInTodoListMutation();\n  const { t } = useTranslation();\n\n  const onSubmit = (data: ITaskDialog) => {\n    if (!data.notify) data.notifyDate = null;\n\n    if (editTaskData)\n      editTaskMutation.mutate({ todoListId, taskId: editTaskData.id, data });\n    else createTaskMutation.mutate({ todoListId, data });\n    onClose();\n  };\n\n  const { handleSubmit, control, setFocus } = methods;\n\n  useEffect(() => {\n    setFocus(\"text\");\n  }, [setFocus]);\n\n  return (\n    <Dialog open={open} onClose={onClose}>\n      <FormProvider {...methods}>\n        <StyledForm onSubmit={handleSubmit(onSubmit)}>\n          <Typography variant=\"h4\">\n            {editTaskData\n              ? `${t(TranslationKeys.EditTask)}: ${editTaskData.text}`\n              : t(TranslationKeys.AddTask)}\n          </Typography>\n          <ControlledTextField\n            autoFocus\n            ref={taskRef}\n            name={\"text\"}\n            error={!!methods.formState.errors?.text}\n            helperText={\n              methods.formState.errors.text?.type === \"required\" &&\n              t(TranslationKeys.FieldRequired)\n            }\n            control={control}\n            placeholder={t(TranslationKeys.TaskName)}\n          />\n          <DatesPickers />\n\n          <StyledCheckboxesWrapper>\n            <ControlledCheckbox\n              name={\"notify\"}\n              control={control}\n              label={t(TranslationKeys.NotifyMe)}\n            />\n            <ControlledCheckbox\n              name={\"important\"}\n              control={control}\n              label={t(TranslationKeys.TaskImportant)}\n            />\n          </StyledCheckboxesWrapper>\n          <CollapsableNotifyForm control={methods.control} />\n          <Button type=\"submit\">\n            {editTaskData\n              ? t(TranslationKeys.Save)\n              : t(TranslationKeys.AddTask)}\n          </Button>\n        </StyledForm>\n      </FormProvider>\n    </Dialog>\n  );\n};\n\nexport default memo(TaskDialog);\n","import { useMutation } from \"@tanstack/react-query\";\nimport { apiPost } from \"framework/asyncInteractions\";\nimport { FRONTIFY_URL } from \"framework/asyncInteractions/frontifyRequestUrl.helper\";\nimport { ITaskDTO, stringifyTaskDateFields } from \"linked-models/task/task.dto\";\nimport { ITask, ITaskAttached } from \"linked-models/task/task.model\";\nimport { URL_TODO_LIST_TASKS } from \"linked-models/task/task.urls\";\nimport useUpdateQueriesAfterCreatingTask from \"./useUpdateQueriesAfterCreatingTask\";\n\ninterface ICreateTaskInTodoListMutation {\n  todoListId: string;\n  data: ITask;\n}\n\nexport const useCreateTaskMutation = () => {\n  const updateQueriesAfterCreatingTask = useUpdateQueriesAfterCreatingTask();\n\n  const createTaskInTodoList = async (todoListId: string, data: ITask) => {\n    const url = FRONTIFY_URL(URL_TODO_LIST_TASKS(todoListId));\n    return apiPost<ITaskDTO, ITaskAttached>(\n      url,\n      stringifyTaskDateFields(data)\n    ).then((res) => res.data);\n  };\n\n  return useMutation(\n    ({ todoListId, data }: ICreateTaskInTodoListMutation) =>\n      createTaskInTodoList(todoListId, data),\n    {\n      onSuccess: updateQueriesAfterCreatingTask,\n    }\n  );\n};\n","import { useMutation } from \"@tanstack/react-query\";\nimport { apiPut } from \"framework/asyncInteractions\";\nimport { FRONTIFY_URL } from \"framework/asyncInteractions/frontifyRequestUrl.helper\";\nimport { ITaskDTO, stringifyTaskDateFields } from \"linked-models/task/task.dto\";\nimport { ITask, ITaskAttached } from \"linked-models/task/task.model\";\nimport { URL_TODO_LIST_TASK } from \"linked-models/task/task.urls\";\nimport useUpdateQueriesAfterEditingTask from \"./useUpdateQueriesAfterEditingTask\";\n\nexport const useEditTaskInTodoListMutation = () => {\n  const updateQueriesAfterEditingTask = useUpdateQueriesAfterEditingTask();\n\n  const editTaskInTodoList = async ({\n    todoListId,\n    taskId,\n    data,\n  }: {\n    todoListId: string;\n    taskId: string;\n    data: Partial<ITask>;\n  }) => {\n    return apiPut<Partial<ITaskDTO>, ITaskAttached>(\n      FRONTIFY_URL(URL_TODO_LIST_TASK(todoListId, taskId)),\n      stringifyTaskDateFields(data)\n    ).then((res) => res.data);\n  };\n\n  return useMutation(editTaskInTodoList, {\n    onSuccess: updateQueriesAfterEditingTask,\n  });\n};\n"],"names":["CollapsableNotifyForm","_ref","control","watch","useWatch","_jsx","_Fragment","children","Collapse","in","timeout","style","minHeight","NotifyForm","memo","StyledCheckboxesWrapper","styled","display","TaskDialog","_methods$formState$er","_methods$formState$er2","_useDialogs","useDialogs","_useDialogs$dialogsSt","dialogsState","taskDialog","editTaskData","todoListId","visible","updateTaskDialog","dialogsActions","taskRef","useRef","_useAppDialogState","useAppDialogState","initialTaskDialog","_useAppDialogState2","_slicedToArray","open","onClose","defaultSelectsValues","notifyDate","createNotifySelectParams","Date","startDate","finishDate","defaultFormValues","text","minsAccordingToTimePoint","beforeOrAfter","timePoint","now","important","notify","methods","useForm","defaultValues","createTaskMutation","useCreateTaskMutation","editTaskMutation","useEditTaskInTodoListMutation","t","useTranslation","handleSubmit","setFocus","useEffect","Dialog","FormProvider","_objectSpread","_jsxs","StyledForm","onSubmit","data","mutate","taskId","id","Typography","variant","concat","TranslationKeys","EditTask","AddTask","ControlledTextField","autoFocus","ref","name","error","formState","errors","helperText","type","FieldRequired","placeholder","TaskName","DatesPickers","ControlledCheckbox","label","NotifyMe","TaskImportant","Button","Save","updateQueriesAfterCreatingTask","useUpdateQueriesAfterCreatingTask","createTaskInTodoList","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","wrap","_context","prev","next","FRONTIFY_URL","URL_TODO_LIST_TASKS","abrupt","apiPost","stringifyTaskDateFields","then","res","stop","_x","_x2","apply","arguments","useMutation","_ref2","onSuccess","updateQueriesAfterEditingTask","useUpdateQueriesAfterEditingTask","editTaskInTodoList","apiPut","URL_TODO_LIST_TASK"],"sourceRoot":""}