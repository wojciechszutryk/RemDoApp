{"version":3,"file":"static/js/774.102aefd0.chunk.js","mappings":"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","sources":["atomicComponents/atoms/DatePicker/styles.ts","atomicComponents/atoms/DateTimePicker/index.tsx","atomicComponents/atoms/Dialog/styles.ts","atomicComponents/atoms/Dialog/index.tsx","atomicComponents/atoms/Select/styles.ts","atomicComponents/atoms/Select/index.tsx","atomicComponents/molecules/ControlledDateTimePicker/index.tsx","framework/dialogs/components/TaskDialog/components/styles.ts","framework/dialogs/components/TaskDialog/components/DatePickerWithIcon.tsx","framework/dialogs/components/TaskDialog/components/DatesPickers.tsx","framework/dialogs/components/TaskDialog/components/NotifyForm/helpers/index.ts","framework/dialogs/components/TaskDialog/components/NotifyForm/styles.ts","framework/dialogs/components/TaskDialog/components/NotifyForm/index.tsx","framework/dialogs/components/TodoListDialog/styles.ts","framework/dialogs/hooks/useAppDialogState.ts","../../models/task/task.dto.ts"],"sourcesContent":["import CalendarMonthIcon from \"@mui/icons-material/CalendarMonth\";\nimport { styled } from \"@mui/material\";\n\nexport const StyledCallendarIcon = styled(CalendarMonthIcon, {\n  shouldForwardProp: (prop) => prop !== \"disabled\",\n})<{ disabled?: boolean }>(({ theme, disabled }) => ({\n  color: theme.palette.primary.dark,\n  zIndex: 12,\n  marginRight: \"10px\",\n  cursor: \"pointer\",\n  transition: \"all 0.1s ease-in-out\",\n  ...(!disabled && {\n    \"&:hover\": {\n      transform: \"scale(1.2)\",\n    },\n  }),\n}));\n","import InputLabel from \"@mui/material/InputLabel\";\nimport {\n  DateTimePicker as MuiDateTimePicker,\n  DateTimePickerProps as MuiDateTimePickerProps,\n} from \"@mui/x-date-pickers\";\nimport { Dayjs } from \"dayjs\";\nimport { memo, useState } from \"react\";\nimport { StyledCallendarIcon } from \"../DatePicker/styles\";\nimport { TextField } from \"../TextField\";\n\nconst DateTimePicker = ({\n  label,\n  ...props\n}: MuiDateTimePickerProps<Dayjs>): JSX.Element => {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <>\n      {label && <InputLabel>{label}</InputLabel>}\n      <MuiDateTimePicker\n        {...props}\n        open={open}\n        ampm={false}\n        slots={{\n          textField: TextField,\n        }}\n        onClose={() => setOpen(false)}\n        slotProps={{\n          ...props.slotProps,\n          textField: {\n            ...props.slotProps?.textField,\n            InputProps: {\n              disabled: props.disabled,\n              startAdornment: (\n                <StyledCallendarIcon\n                  disabled={props.disabled}\n                  onClick={() => !props.disabled && setOpen(true)}\n                />\n              ),\n            },\n          },\n        }}\n      />\n    </>\n  );\n};\n\nexport default memo(DateTimePicker);\n","import { IconButton, Dialog as MuiDialog, styled } from \"@mui/material\";\n\nexport const StyledInnerWrapper = styled(\"div\")(({ theme }) => ({\n  backgroundColor: theme.palette.primary.light,\n  padding: 10,\n  height: \"100vh\",\n  borderRadius: \"20px\",\n  overflowY: \"auto\",\n\n  [theme.breakpoints.up(\"sm\")]: {\n    height: \"auto\",\n    padding: \"55px\",\n    borderRadius: \"200px\",\n  },\n}));\n\nexport const StyledCloseButton = styled(IconButton)(({ theme }) => ({\n  position: \"absolute\",\n  backgroundColor: theme.palette.primary.main,\n  borderRadius: \"150px 200px 130px 170px\",\n  top: 0,\n  right: 2,\n  width: 30,\n  height: 30,\n  transition: \"0.3s\",\n  \"&:hover\": {\n    backgroundColor: theme.palette.primary.main,\n    opacity: 0.8,\n  },\n  [theme.breakpoints.up(\"sm\")]: {\n    top: -19,\n    right: 2,\n  },\n}));\n\nexport const StyledDialog = styled(MuiDialog)(({ theme }) => ({\n  \".MuiDialog-root\": {\n    padding: \"0px\",\n  },\n  \".MuiDialog-container\": {\n    padding: \"0px\",\n  },\n  \".MuiDialog-paper\": {\n    position: \"absolute\",\n    top: 0,\n    overflow: \"visible\",\n    backgroundColor: theme.palette.primary.main,\n    color: theme.palette.primary.contrastText,\n    boxSizing: \"border-box\",\n    width: \"100%\",\n    minHeight: \"100vh\",\n    margin: \"0px\",\n    maxWidth: \"none\",\n    padding: \"10px\",\n\n    [theme.breakpoints.up(\"sm\")]: {\n      top: \"50%\",\n      width: `518px`,\n      minHeight: \"fit-content\",\n      borderRadius: \"200px 210px 200px 155px\",\n      transform: \"rotate(5deg) translateY(-50%)\",\n      \"& > *\": {\n        transform: \"rotate(-5deg)\",\n      },\n    },\n    [theme.breakpoints.up(\"md\")]: {\n      height: \"auto\",\n      width: `573px`,\n    },\n    [theme.breakpoints.up(\"lg\")]: {\n      width: `618px`,\n    },\n    [theme.breakpoints.up(\"xl\")]: {\n      height: \"fit-content\",\n      width: `750px`,\n    },\n  },\n}));\n","import CloseIcon from \"@mui/icons-material/Close\";\nimport { DialogProps, Slide } from \"@mui/material\";\nimport { TransitionProps } from \"@mui/material/transitions\";\nimport { forwardRef, memo } from \"react\";\nimport { StyledCloseButton, StyledDialog, StyledInnerWrapper } from \"./styles\";\n\nconst Transition = forwardRef(function Transition(\n  props: TransitionProps & {\n    children: React.ReactElement<any, any>;\n  },\n  ref: React.Ref<unknown>\n) {\n  return <Slide direction=\"down\" ref={ref} in={true} {...props} />;\n});\n\nconst Dialog = ({ children, ...props }: DialogProps): JSX.Element => {\n  return (\n    <StyledDialog {...props} TransitionComponent={Transition} keepMounted>\n      <StyledInnerWrapper>{children}</StyledInnerWrapper>\n\n      {props.onClose && (\n        <StyledCloseButton onClick={(e) => props.onClose?.(e, \"backdropClick\")}>\n          <CloseIcon />\n        </StyledCloseButton>\n      )}\n    </StyledDialog>\n  );\n};\n\nexport default memo(Dialog);\n","import Select, { selectClasses } from \"@mui/material/Select\";\nimport { styled } from \"@mui/material/styles\";\n\nexport const StyledWrapper = styled(\"div\")({\n  minWidth: \"100px\",\n  width: \"100%\",\n  \"& .MuiSelect-select:focus, &.Mui-focused\": {\n    backgroundColor: \"transparent\",\n  },\n  \"& svg\": {\n    transition: \"transform .15s\",\n    right: 8,\n    top: \"calc(50% - 12px)\",\n    \"&.MuiSelect-iconOpen\": {\n      top: \"calc(50% - 10px)\",\n    },\n  },\n});\n\nexport const StyledSelect = styled(Select, {\n  shouldForwardProp: (prop) => prop !== \"disabled\",\n})<{ disabled?: boolean }>(({ theme, disabled }) => ({\n  height: 52,\n  paddingLeft: 0,\n  paddingTop: 0,\n  paddingBottom: 0,\n  lineHeight: \"54px\",\n  color: theme.palette.primary.contrastText,\n  border: `2px solid ${theme.palette.primary.contrastText}`,\n  borderRadius: theme.spacing(3),\n  transition: \"all .15s\",\n  ...(disabled && {\n    pointerEvents: \"none\",\n    opacity: 0.5,\n  }),\n\n  [`&.${selectClasses.select}`]: {\n    backgroundColor: \"transparent\",\n    boxShadow: \"none\",\n  },\n  [`&.Mui-focused:has(.${selectClasses.select}[aria-expanded=\"true\"])`]: {\n    backgroundColor: `transparent !important`,\n    border: \"none\",\n  },\n  [`& > .${selectClasses.select}`]: {\n    paddingLeft: 16,\n    paddingBottom: 0,\n    paddingTop: 0,\n  },\n}));\n","import {\n  FormControl,\n  MenuItem,\n  MenuProps as MuiMenuProps,\n  SelectProps as MuiSelectProps,\n} from \"@mui/material\";\nimport { StyledSelect, StyledWrapper } from \"./styles\";\n\nconst MenuProps: Partial<MuiMenuProps> = {\n  anchorOrigin: {\n    vertical: \"top\",\n    horizontal: \"center\",\n  },\n  variant: \"menu\",\n  MenuListProps: {\n    sx: {\n      width: \"calc(100% - 32px)\",\n      margin: \"0 auto\",\n      wordWrap: \"break-word\",\n    },\n  },\n  PaperProps: {\n    style: {\n      borderRadius: \"20px\",\n      maxHeight: 300,\n      margin: 0,\n    },\n  },\n};\n\nexport interface SelectProps extends MuiSelectProps {\n  options?: string[] | { value: string; label: string }[];\n  value: string[] | string;\n}\n\nexport const Select = ({\n  options,\n  value,\n  children,\n  ...otherProps\n}: SelectProps): JSX.Element => {\n  return (\n    <StyledWrapper>\n      <FormControl fullWidth variant={\"standard\"}>\n        <StyledSelect\n          {...otherProps}\n          disableUnderline\n          autoWidth={false}\n          value={value ? value : []}\n          MenuProps={MenuProps}\n        >\n          {options\n            ? options.map((item) =>\n                typeof item === \"string\" ? (\n                  <MenuItem key={item} value={item}>\n                    {item}\n                  </MenuItem>\n                ) : (\n                  <MenuItem key={item.value} value={item.value}>\n                    {item.label}\n                  </MenuItem>\n                )\n              )\n            : children}\n        </StyledSelect>\n      </FormControl>\n    </StyledWrapper>\n  );\n};\n","import { DateTimePickerProps } from \"@mui/x-date-pickers\";\nimport DateTimePicker from \"atomicComponents/atoms/DateTimePicker\";\nimport dayjs, { Dayjs } from \"dayjs\";\nimport {\n  Control,\n  Controller,\n  FieldPath,\n  FieldValues,\n  PathValue,\n} from \"react-hook-form\";\n\nexport interface ControlledDateTimePickerProps<\n  TFieldValues extends FieldValues,\n  TName extends FieldPath<TFieldValues>\n> extends Omit<DateTimePickerProps<Dayjs>, \"name\"> {\n  control?: Control<TFieldValues, any> | undefined;\n  name: TName;\n}\n\nexport const ControlledDateTimePicker = <\n  TFieldValues extends FieldValues,\n  TName extends FieldPath<TFieldValues>\n>({\n  control,\n  name,\n  ...props\n}: ControlledDateTimePickerProps<TFieldValues, TName>): JSX.Element => {\n\n  return (\n    <Controller\n      control={control}\n      name={name}\n      render={({ field: { ref, onChange, value } }) => (\n        <DateTimePicker\n          {...props}\n          onChange={(date) =>\n            onChange(date?.toDate() as PathValue<TFieldValues, TName>)\n          }\n          value={dayjs(value)}\n          inputRef={ref}\n        />\n      )}\n    />\n  );\n};\n","import { styled } from \"@mui/material\";\n\nexport const StyledDatePickerWrapper = styled(\"div\")({\n  display: \"flex\",\n  alignItems: \"center\",\n});\n","import { Tooltip } from \"@mui/material\";\nimport {\n  ControlledDateTimePicker,\n  ControlledDateTimePickerProps,\n} from \"atomicComponents/molecules/ControlledDateTimePicker\";\nimport { FieldPath } from \"react-hook-form\";\nimport { StyledDatePickerWrapper as StyledDateTimePickerWrapper } from \"./styles\";\n\ninterface Props<T extends object>\n  extends ControlledDateTimePickerProps<T, FieldPath<T>> {\n  Icon: JSX.Element;\n  tooltipTitle: string;\n}\n\nfunction DateTimePickerWithIcon<T extends object>({\n  Icon,\n  tooltipTitle,\n  name,\n  control,\n  slotProps,\n  ...props\n}: Props<T>) {\n  /**\n   * modifiers of popper\n   * small screen: display over icon\n   * large screen: display under or above icon\n   */\n  const modifiers =\n    window.innerHeight > 804\n      ? [\n          {\n            name: \"flip\",\n            enabled: true,\n            options: {\n              altBoundary: false,\n              rootBoundary: \"viewport\",\n              padding: 1,\n            },\n          },\n        ]\n      : [\n          {\n            name: \"flip\",\n            enabled: true,\n            options: {\n              altBoundary: false,\n              rootBoundary: \"viewport\",\n              padding: 1,\n            },\n          },\n          {\n            name: \"preventOverflow\",\n            enabled: true,\n            options: {\n              altAxis: true,\n              altBoundary: true,\n              tether: true,\n              rootBoundary: \"viewport\",\n              padding: 18,\n            },\n          },\n        ];\n\n  return (\n    <StyledDateTimePickerWrapper>\n      <Tooltip title={tooltipTitle}>\n        <div>{Icon}</div>\n      </Tooltip>\n      <ControlledDateTimePicker\n        {...props}\n        control={control}\n        name={name}\n        slotProps={{\n          ...slotProps,\n          popper: {\n            modifiers,\n          },\n        }}\n      />\n    </StyledDateTimePickerWrapper>\n  );\n}\n\nexport default DateTimePickerWithIcon;\n","import FlagCircleIcon from \"@mui/icons-material/FlagCircle\";\nimport PlayCircleOutlineIcon from \"@mui/icons-material/PlayCircleOutline\";\nimport dayjs from \"dayjs\";\nimport { TranslationKeys } from \"framework/translations/translatedTexts/translationKeys\";\nimport { memo } from \"react\";\nimport { useFormContext, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { ITaskDialog } from \"../models/taskDialog.model\";\nimport DateTimePickerWithIcon from \"./DatePickerWithIcon\";\n\ntype DatePickerValues = Pick<ITaskDialog, \"finishDate\" | \"startDate\">;\n\nconst DatesPickers = (): JSX.Element => {\n  const watch = useWatch<DatePickerValues>();\n  const { control } = useFormContext<DatePickerValues>();\n  const { t } = useTranslation();\n  return (\n    <>\n      {[\n        {\n          Icon: <PlayCircleOutlineIcon />,\n          tooltipTitle: t(TranslationKeys.StartDate),\n          name: \"startDate\" as keyof DatePickerValues,\n          control,\n          maxDateTime: dayjs(watch[\"finishDate\"]),\n        },\n        {\n          Icon: <FlagCircleIcon />,\n          tooltipTitle: t(TranslationKeys.FinishDate),\n          name: \"finishDate\" as keyof DatePickerValues,\n          control,\n          minDateTime: dayjs(watch[\"startDate\"]),\n          slotProps: {\n            textField: {\n              error: false,\n            },\n          },\n        },\n      ].map((props, index) => (\n        <DateTimePickerWithIcon key={index} {...props} />\n      ))}\n    </>\n  );\n};\n\nexport default memo(DatesPickers);\n","import { NotifyDateCreatorFields } from \"../models\";\n\nexport const createDateFromSelectValues = (\n  params: NotifyDateCreatorFields,\n  startDate?: Date | null,\n  finishDate?: Date | null\n): Date | null => {\n  if (\n    params.minsAccordingToTimePoint == null ||\n    !params.beforeOrAfter ||\n    !params.timePoint\n  )\n    return null;\n\n  if (params.timePoint === \"Start\") {\n    if (params.beforeOrAfter === \"Before\") {\n      return startDate\n        ? new Date(\n            startDate.getTime() - params.minsAccordingToTimePoint * 60 * 1000\n          )\n        : null;\n    } else {\n      return startDate\n        ? new Date(\n            startDate.getTime() + params.minsAccordingToTimePoint * 60 * 1000\n          )\n        : null;\n    }\n  }\n\n  if (params.timePoint === \"Finish\") {\n    if (params.beforeOrAfter === \"Before\") {\n      return finishDate\n        ? new Date(\n            finishDate.getTime() - params.minsAccordingToTimePoint * 60 * 1000\n          )\n        : null;\n    } else {\n      return finishDate\n        ? new Date(\n            finishDate.getTime() + params.minsAccordingToTimePoint * 60 * 1000\n          )\n        : null;\n    }\n  }\n\n  return null;\n};\n\nexport const createNotifySelectParams = (\n  notifyDate?: Date,\n  startDate?: Date | null,\n  finishDate?: Date | null\n): NotifyDateCreatorFields => {\n  if (!notifyDate)\n    return {\n      minsAccordingToTimePoint: null,\n      beforeOrAfter: undefined,\n      timePoint: undefined,\n    };\n\n  if (startDate) {\n    if (notifyDate < startDate) {\n      // when notifyDate is before startDate return MINUTES BEFORE START\n      return {\n        minsAccordingToTimePoint: Math.floor(\n          (startDate.getTime() - notifyDate.getTime()) / 1000 / 60\n        ),\n        beforeOrAfter: \"Before\",\n        timePoint: \"Start\",\n      };\n    }\n\n    if (!finishDate) {\n      // when notifyDate is after startDate and there is no finishDate return MINUTES AFTER START\n      return {\n        minsAccordingToTimePoint: Math.floor(\n          (notifyDate.getTime() - startDate.getTime()) / 1000 / 60\n        ),\n        beforeOrAfter: \"After\",\n        timePoint: \"Start\",\n      };\n    }\n  }\n\n  if (finishDate) {\n    // when notifyDate is after finishDate return MINUTES AFTER FINISH\n    if (notifyDate > finishDate) {\n      return {\n        minsAccordingToTimePoint: Math.floor(\n          (notifyDate.getTime() - finishDate.getTime()) / 1000 / 60\n        ),\n        beforeOrAfter: \"After\",\n        timePoint: \"Finish\",\n      };\n    }\n\n    if (!startDate) {\n      // when notifyDate is before finishDate and there is no startDate return MINUTES BEFORE FINISH\n\n      return {\n        minsAccordingToTimePoint: Math.floor(\n          (finishDate.getTime() - notifyDate.getTime()) / 1000 / 60\n        ),\n        beforeOrAfter: \"Before\",\n        timePoint: \"Finish\",\n      };\n    }\n\n    // when notifyDate is between startDate and finishDate return MINUTES BEFORE FINISH\n    return {\n      minsAccordingToTimePoint: Math.floor(\n        (finishDate.getTime() - startDate.getTime()) / 1000 / 60\n      ),\n      beforeOrAfter: \"Before\",\n      timePoint: \"Finish\",\n    };\n  }\n\n  return {\n    minsAccordingToTimePoint: null,\n    beforeOrAfter: undefined,\n    timePoint: undefined,\n  };\n};\n","import { styled } from \"@mui/material\";\n\nexport const StyledNotifyInputsWrapper = styled(\"div\")({\n  display: \"flex\",\n  flexWrap: \"wrap\",\n  flexDirection: \"row\",\n  justifyContent: \"space-between\",\n  alignItems: \"center\",\n  borderRadius: \"40px\",\n  \"& > div\": { flexBasis: \"calc(32% - 9px)\" },\n  \"& > div:last-of-type\": { flexBasis: \"100%\", marginTop: \"1rem\" },\n});\n","import { Autocomplete } from \"@mui/material\";\nimport DateTimePicker from \"atomicComponents/atoms/DateTimePicker\";\nimport { Select } from \"atomicComponents/atoms/Select\";\nimport { TextField } from \"atomicComponents/atoms/TextField\";\nimport dayjs from \"dayjs\";\nimport { IReminderDialog } from \"framework/dialogs/components/ReminderDialog/models/reminderDialog.model\";\nimport { TranslationKeys } from \"framework/translations/translatedTexts/translationKeys\";\nimport { ChangeEvent, memo } from \"react\";\nimport {\n  Control,\n  Controller,\n  FieldValues,\n  Path,\n  PathValue,\n  useFormContext,\n  useWatch,\n} from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { ITaskDialog } from \"../../models/taskDialog.model\";\nimport {\n  createDateFromSelectValues,\n  createNotifySelectParams,\n} from \"./helpers\";\nimport { StyledNotifyInputsWrapper } from \"./styles\";\n\ninterface Props<TFormValues extends FieldValues> {\n  control: Control<TFormValues, any>;\n}\n\nconst NotifyForm = <\n  TFormValues extends IReminderDialog | ITaskDialog,\n  TFieldValues extends TFormValues\n>({\n  control,\n}: Props<TFieldValues>): JSX.Element => {\n  const { t } = useTranslation();\n  const watch = useWatch<TFormValues>();\n  const { setValue } = useFormContext<TFormValues>();\n\n  const timePointOptions = watch[\"startDate\"]\n    ? watch[\"finishDate\"]\n      ? [\n          { value: \"Start\", label: t(TranslationKeys.Start) },\n          { value: \"Finish\", label: t(TranslationKeys.Finish) },\n        ]\n      : [{ value: \"Start\", label: t(TranslationKeys.Start) }]\n    : watch[\"finishDate\"]\n    ? [{ value: \"Finish\", label: t(TranslationKeys.Finish) }]\n    : [{ value: \"Start\", label: t(TranslationKeys.Start) }];\n\n  const beforeOrAfterOptions = [\n    { value: \"Before\", label: t(TranslationKeys.Before) },\n    { value: \"After\", label: t(TranslationKeys.After) },\n  ];\n\n  const disableSelects =\n    !watch[\"notify\"] || (!watch[\"startDate\"] && !watch[\"finishDate\"]);\n\n  return (\n    <StyledNotifyInputsWrapper>\n      <Controller\n        control={control}\n        name={\"minsAccordingToTimePoint\" as Path<TFieldValues>}\n        render={({ field: { ref, onChange, value } }) => (\n          <Autocomplete\n            ref={ref}\n            disabled={disableSelects}\n            autoSelect\n            onChange={(event, value) => {\n              if (value == null) return;\n\n              const mins = parseInt(value);\n              const newDate = createDateFromSelectValues(\n                {\n                  minsAccordingToTimePoint: mins,\n                  beforeOrAfter: watch[\"beforeOrAfter\"],\n                  timePoint: watch[\"timePoint\"],\n                },\n                watch[\"startDate\"] && new Date(watch[\"startDate\"]),\n                watch[\"finishDate\"] && new Date(watch[\"finishDate\"])\n              );\n\n              setValue(\n                \"notifyDate\" as Path<TFormValues>,\n                (newDate || undefined) as PathValue<\n                  TFormValues,\n                  Path<TFormValues>\n                >\n              );\n\n              onChange(\n                mins.toString() as unknown as\n                  | PathValue<TFieldValues, Path<TFieldValues>>\n                  | ChangeEvent<Element>\n              );\n            }}\n            value={value ? value.toString() : null}\n            freeSolo\n            options={[\"5\", \"10\", \"15\", \"30\"]}\n            renderInput={(params) => {\n              return (\n                <TextField\n                  {...params}\n                  InputLabelProps={undefined}\n                  disabled={disableSelects}\n                />\n              );\n            }}\n          />\n        )}\n      />\n      <span> min</span>\n      <Controller\n        control={control}\n        name={\"beforeOrAfter\" as Path<TFieldValues>}\n        render={({ field: { onChange, value } }) => (\n          <Select\n            options={beforeOrAfterOptions}\n            disabled={disableSelects}\n            onChange={(event) => {\n              const newBeforeOrAfterValue = event.target.value as\n                | \"Before\"\n                | \"After\"\n                | undefined;\n              const newDate = createDateFromSelectValues(\n                {\n                  minsAccordingToTimePoint: watch[\"minsAccordingToTimePoint\"],\n                  beforeOrAfter: newBeforeOrAfterValue,\n                  timePoint: watch[\"timePoint\"],\n                },\n                watch[\"startDate\"] && new Date(watch[\"startDate\"]),\n                watch[\"finishDate\"] && new Date(watch[\"finishDate\"])\n              );\n\n              setValue(\n                \"notifyDate\" as Path<TFormValues>,\n                (newDate || undefined) as PathValue<\n                  TFormValues,\n                  Path<TFormValues>\n                >\n              );\n\n              if (newBeforeOrAfterValue)\n                onChange(\n                  newBeforeOrAfterValue as unknown as\n                    | PathValue<TFieldValues, Path<TFieldValues>>\n                    | ChangeEvent<Element>\n                );\n            }}\n            value={value as \"Before\" | \"After\"}\n          />\n        )}\n      />\n      <Controller\n        control={control}\n        name={\"timePoint\" as Path<TFieldValues>}\n        render={({ field: { onChange, value } }) => (\n          <Select\n            options={timePointOptions}\n            disabled={disableSelects}\n            defaultValue={\"Start\"}\n            placeholder={\"Time point\"}\n            onChange={(event) => {\n              const newTimePoint = event.target.value as\n                | \"Start\"\n                | \"Finish\"\n                | undefined;\n              const newDate = createDateFromSelectValues(\n                {\n                  minsAccordingToTimePoint: watch[\"minsAccordingToTimePoint\"],\n                  beforeOrAfter: watch[\"beforeOrAfter\"],\n                  timePoint: newTimePoint,\n                },\n                watch[\"startDate\"] && new Date(watch[\"startDate\"]),\n                watch[\"finishDate\"] && new Date(watch[\"finishDate\"])\n              );\n\n              setValue(\n                \"notifyDate\" as Path<TFormValues>,\n                (newDate || undefined) as PathValue<\n                  TFormValues,\n                  Path<TFormValues>\n                >\n              );\n\n              onChange(\n                newTimePoint as unknown as\n                  | PathValue<TFieldValues, Path<TFieldValues>>\n                  | ChangeEvent<Element>\n              );\n            }}\n            value={value as \"Start\" | \"Finish\"}\n          />\n        )}\n      />\n      <Controller\n        control={control}\n        name={\"notifyDate\" as Path<TFieldValues>}\n        render={({ field: { ref, onChange, value } }) => (\n          <DateTimePicker\n            disabled={!watch[\"notify\"]}\n            onChange={(date) => {\n              const selectParams = createNotifySelectParams(\n                date?.toDate(),\n                watch[\"startDate\"] && new Date(watch[\"startDate\"]),\n                watch[\"finishDate\"] && new Date(watch[\"finishDate\"])\n              );\n\n              if (selectParams) {\n                setValue(\n                  \"minsAccordingToTimePoint\" as Path<TFormValues>,\n                  selectParams.minsAccordingToTimePoint as PathValue<\n                    TFormValues,\n                    Path<TFormValues>\n                  >\n                );\n                setValue(\n                  \"beforeOrAfter\" as Path<TFormValues>,\n                  selectParams.beforeOrAfter as PathValue<\n                    TFormValues,\n                    Path<TFormValues>\n                  >\n                );\n                setValue(\n                  \"timePoint\" as Path<TFormValues>,\n                  selectParams.timePoint as PathValue<\n                    TFormValues,\n                    Path<TFormValues>\n                  >\n                );\n              }\n\n              onChange(\n                date?.toDate() as unknown as\n                  | PathValue<TFieldValues, Path<TFieldValues>>\n                  | ChangeEvent<Element>\n              );\n            }}\n            value={dayjs(value as Date)}\n            inputRef={ref}\n          />\n        )}\n      />\n    </StyledNotifyInputsWrapper>\n  );\n};\n\nexport default memo(NotifyForm);\n","import { Autocomplete, Chip, styled } from \"@mui/material\";\n\nexport const StyledForm = styled(\"form\")(({ theme }) => ({\n  display: \"flex\",\n  flexDirection: \"column\",\n  gap: 10,\n  padding: \"10px 0\",\n  [theme.breakpoints.up(\"sm\")]: {\n    maxHeight: \"70vh\",\n    overflowX: \"hidden\",\n    overflowY: \"auto\",\n  },\n}));\n\nexport const StyledInlineInputs = styled(\"div\")({\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n});\n\nexport const StyledAutocompleteChip = styled(Chip)(({ theme }) => ({\n  zIndex: 1,\n  backgroundColor: theme.palette.primary.main,\n  color: theme.palette.secondary.contrastText,\n  margin: \"0 2px\",\n}));\n\nexport const StyledAutocomplete = styled(\n  Autocomplete<string, true, false, true>\n)({\n  marginBottom: 10,\n  \"& .MuiFormControl-root\": {\n    height: \"unset\",\n  },\n});\n","import { useState } from \"react\";\n\n/**\n * Hook used to handle open, onClose state of the dialogs that are part of dialogs context. It closes dialog after animation ends. It is necessary because dialogs are loaded lazy and mounted only when their context visibility is set to true.\n */\nconst useAppDialogState = <T extends { visible: boolean }>(\n  contextVisible: boolean,\n  onCloseContextAction: (payload: T) => void\n): [boolean, () => void] => {\n  const [localVisible, setLocalVisible] = useState(contextVisible);\n\n  const onClose = () => {\n    setLocalVisible(false);\n    setTimeout(() => {\n      onCloseContextAction({ visible: false } as T);\n    }, 300);\n  };\n\n  return [localVisible, onClose];\n};\n\nexport default useAppDialogState;\n","import { IUserPublicDataDTO } from \"linked-models/user/user.dto\";\nimport { ITask, ITaskAttached } from \"./task.model\";\n\nexport interface ITaskDTO\n  extends Omit<ITask, \"completionDate\" | \"finishDate\" | \"startDate\"> {\n  finishDate?: string | null;\n  startDate?: string | null;\n  completionDate?: string | null;\n}\n\n/**\n * Task with creator\n */\nexport interface IExtendedTaskDto extends Omit<ITaskAttached, \"creatorId\"> {\n  creator?: IUserPublicDataDTO;\n}\n\nexport function parseTaskDateFields<T extends Partial<ITaskDTO>>(task: T) {\n  const converStringifiedDateProperty = (value: string | undefined | null) =>\n    typeof value === \"string\" ? new Date(value) : value;\n\n  return {\n    ...task,\n    finishDate: converStringifiedDateProperty(task.finishDate),\n    startDate: converStringifiedDateProperty(task.startDate),\n    completionDate: converStringifiedDateProperty(task.completionDate),\n  };\n}\n\nexport function stringifyTaskDateFields<T extends Partial<ITask>>(task: T) {\n  const converDateProperty = (value: Date | undefined | null) =>\n    value instanceof Date ? value.toString() : value;\n  return {\n    ...task,\n    finishDate: converDateProperty(task.finishDate),\n    startDate: converDateProperty(task.startDate),\n    completionDate: converDateProperty(task.completionDate),\n  };\n}\n"],"names":["StyledCallendarIcon","styled","CalendarMonthIcon","shouldForwardProp","prop","_ref","theme","disabled","_objectSpread","color","palette","primary","dark","zIndex","marginRight","cursor","transition","transform","DateTimePicker","_props$slotProps","label","props","_objectWithoutProperties","_excluded","_useState","useState","_useState2","_slicedToArray","open","setOpen","_jsxs","_Fragment","children","_jsx","InputLabel","MuiDateTimePicker","ampm","slots","textField","TextField","onClose","slotProps","InputProps","startAdornment","onClick","memo","StyledInnerWrapper","_defineProperty","backgroundColor","light","padding","height","borderRadius","overflowY","breakpoints","up","StyledCloseButton","IconButton","_ref3","position","main","top","right","width","opacity","StyledDialog","MuiDialog","_ref5","_MuiDialogPaper","overflow","contrastText","boxSizing","minHeight","margin","maxWidth","Transition","forwardRef","ref","Slide","direction","in","Dialog","TransitionComponent","keepMounted","e","_props$onClose","call","CloseIcon","StyledWrapper","minWidth","StyledSelect","Select","_objectSpread2","paddingLeft","paddingTop","paddingBottom","lineHeight","border","concat","spacing","pointerEvents","selectClasses","select","boxShadow","MenuProps","anchorOrigin","vertical","horizontal","variant","MenuListProps","sx","wordWrap","PaperProps","style","maxHeight","options","value","otherProps","FormControl","fullWidth","disableUnderline","autoWidth","map","item","MenuItem","ControlledDateTimePicker","control","name","Controller","render","_ref2","_ref2$field","field","onChange","date","toDate","dayjs","inputRef","StyledDatePickerWrapper","display","alignItems","Icon","tooltipTitle","modifiers","window","innerHeight","enabled","altBoundary","rootBoundary","altAxis","tether","StyledDateTimePickerWrapper","Tooltip","title","popper","DatesPickers","watch","useWatch","useFormContext","t","useTranslation","PlayCircleOutlineIcon","TranslationKeys","StartDate","maxDateTime","FlagCircleIcon","FinishDate","minDateTime","error","index","DateTimePickerWithIcon","createDateFromSelectValues","params","startDate","finishDate","minsAccordingToTimePoint","beforeOrAfter","timePoint","Date","getTime","createNotifySelectParams","notifyDate","undefined","Math","floor","StyledNotifyInputsWrapper","flexWrap","flexDirection","justifyContent","flexBasis","marginTop","NotifyForm","setValue","timePointOptions","Start","Finish","beforeOrAfterOptions","Before","After","disableSelects","Autocomplete","autoSelect","event","mins","parseInt","newDate","toString","freeSolo","renderInput","InputLabelProps","_ref3$field","newBeforeOrAfterValue","target","_ref4","_ref4$field","defaultValue","placeholder","newTimePoint","_ref5$field","selectParams","StyledForm","gap","overflowX","StyledInlineInputs","Chip","secondary","marginBottom","contextVisible","onCloseContextAction","localVisible","setLocalVisible","setTimeout","visible","stringifyTaskDateFields","task","converDateProperty","completionDate"],"sourceRoot":""}