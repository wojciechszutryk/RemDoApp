{"version":3,"file":"static/js/679.20e9d7c1.chunk.js","mappings":"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","sources":["pages/HomePage/components/TopSection/styles.ts","pages/LoginPage/LoginPanel/styles.ts","framework/authentication/mutations/useLoginUser.mutation.ts","framework/authentication/helpers/useSuccessAuthHandler.helper.ts","pages/LoginPage/LoginPanel/VerifyAccountAlert/styles.ts","pages/LoginPage/LoginPanel/VerifyAccountAlert/index.tsx","framework/authentication/mutations/resendVerificationEmail.mutation.ts","pages/LoginPage/LoginPanel/LoginForm/index.tsx","framework/authentication/mutations/useForgetPassword.mutation.ts","pages/LoginPage/LoginPanel/RegisterForm/index.tsx","framework/authentication/mutations/useRegisterUser.mutation.ts","pages/LoginPage/LoginPanel/index.tsx","pages/LoginPage/VerifyAccountPanel/styles.ts","pages/LoginPage/VerifyAccountPanel/index.tsx","pages/LoginPage/VerifyAccountPanel/mutations/useVerifyAccount.mutation.ts","pages/LoginPage/index.tsx","../../models/user/auth.consts.ts"],"sourcesContent":["import { styled, Typography } from \"@mui/material\";\nimport { Button } from \"atomicComponents/atoms/Button\";\n\nexport const StyledTopSection = styled(\"div\", {\n  shouldForwardProp: (prop) => prop !== \"noGap\",\n})<{ noGap: boolean }>(({ theme, noGap }) => ({\n  display: \"flex\",\n  flexDirection: \"column\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  minHeight: \"80vh\",\n  gap: noGap ? \"unset\" : \"20px\",\n  textAlign: \"center\",\n  padding: \"58px 16px 60px\",\n\n  \"& > div:last-of-type\": {\n    width: \"120%\",\n  },\n\n  [theme.breakpoints.up(\"sm\")]: {\n    padding: \"58px 42px 60px\",\n\n    \"& > div:last-of-type\": {\n      width: \"unset\",\n    },\n  },\n\n  [theme.breakpoints.up(\"md\")]: {\n    padding: \"58px 64px 60px\",\n    flexDirection: \"row\",\n    alignItems: \"flex-start\",\n    gap: noGap ? \"unset\" : \"100px\",\n  },\n\n  [theme.breakpoints.up(\"lg\")]: {\n    padding: \"58px 128px 60px\",\n    gap: noGap ? \"unset\" : \"200px\",\n  },\n}));\n\nexport const StyledLoginHeader = styled(Typography)(({ theme }) => ({\n  color:\n    theme.palette.mode === \"light\"\n      ? theme.palette.secondary.contrastText\n      : theme.palette.primary.contrastText,\n}));\n\nexport const StyledIntroWrapper = styled(\"div\")(({ theme }) => ({\n  zIndex: 3,\n  color: theme.palette.primary.contrastText,\n  \"& > svg\": {\n    transform: \"scale(1.7)\",\n    \"& path\": {\n      fill: theme.palette.primary.contrastText,\n    },\n  },\n}));\n\nexport const StyledDescription = styled(\"p\")(({ theme }) => ({\n  fontSize: 16,\n  marginTop: 32,\n  lineHeight: 1.5,\n  [theme.breakpoints.up(\"xl\")]: {\n    fontSize: 24,\n  },\n}));\n\nexport const StyledButton = styled(Button)(({ theme }) => ({\n  margin: \"32px auto\",\n  width: \"100%\",\n  [theme.breakpoints.up(\"md\")]: {\n    width: 300,\n  },\n}));\n","import { styled } from \"@mui/material\";\n\nexport const StyledContentWrapper = styled(\"div\")(({ theme }) => ({\n  display: \"flex\",\n  flexDirection: \"column\",\n  alignItems: \"center\",\n  gap: \"20px\",\n  overflow: \"visible\",\n  backgroundColor: theme.palette.secondary.light,\n  color: theme.palette.secondary.contrastText,\n  padding: \"50px 60px\",\n  backgroundImage: `url(${process.env.PUBLIC_URL}/images/wave-doodles.png)`,\n  borderRadius: \"200px 210px 200px 155px\",\n\n  \"@keyframes borderWave\": {\n    \"0%\": {\n      borderRadius: \"200px 210px 200px 155px\",\n    },\n    \"25%\": {\n      borderRadius: \"210px 200px 190px 175px\",\n    },\n    \"50%\": {\n      borderRadius: \"220px 190px 200px 195px\",\n    },\n    \"75%\": {\n      borderRadius: \"210px 200px 190px 175px\",\n    },\n    \"100%\": {\n      borderRadius: \"200px 210px 200px 155px\",\n    },\n  },\n  width: \"90%\",\n\n  [theme.breakpoints.up(\"sm\")]: {\n    width: `518px`,\n    minHeight: \"fit-content\",\n    animation: \"borderWave 5s ease-in-out infinite\",\n  },\n}));\n\nexport const StyledOuterWave = styled(StyledContentWrapper)({\n  transform: \"scale(1.05)\",\n  opacity: 0.5,\n  position: \"absolute\",\n  animationDelay: \"1.5s !important\",\n  height: \"100%\",\n  zIndex: -1,\n});\n\nexport const StyledWrapper = styled(\"div\")({\n  position: \"relative\",\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  width: \"100%\",\n});\n\nexport const StyledForm = styled(\"form\")(({ theme }) => ({\n  display: \"flex\",\n  flexDirection: \"column\",\n  width: \"100%\",\n  gap: \"20px\",\n  marginTop: \"16px\",\n  color: theme.palette.primary.main,\n}));\n\nexport const StyledGruppedButtons = styled(\"div\")({\n  display: \"flex\",\n  justifyContent: \"space-between\",\n  alignItems: \"center\",\n  flexWrap: \"wrap\",\n  width: \"100%\",\n  gap: \"20px\",\n  \"& button\": {\n    flex: 1,\n  },\n});\n\nexport const StyledForgetPassBtn = styled(\"button\")(({ theme }) => ({\n  background: \"transparent\",\n  border: \"none\",\n  color: theme.palette.secondary.contrastText,\n  cursor: \"pointer\",\n  fontSize: \"14px\",\n  transition: \"all 0.2s ease-in-out\",\n  \"&:hover\": {\n    textDecoration: \"underline\",\n  },\n}));\n","import { useMutation, UseMutationResult } from \"@tanstack/react-query\";\nimport { AxiosError } from \"axios\";\nimport { apiPost } from \"framework/asyncInteractions\";\nimport { FRONTIFY_URL } from \"framework/asyncInteractions/frontifyRequestUrl.helper\";\nimport { ILoginUserDTO } from \"linked-models/user/user.dto\";\nimport { IUserAttached } from \"linked-models/user/user.model\";\nimport { URL_LOGIN, URL_USERS } from \"linked-models/user/user.urls\";\nimport { useSuccessAuthHandler } from \"../helpers/useSuccessAuthHandler.helper\";\n\nexport const useLoginUserMutation = (): UseMutationResult<\n  IUserAttached,\n  AxiosError<string>,\n  ILoginUserDTO,\n  unknown\n> => {\n  const successAuthHandler = useSuccessAuthHandler();\n\n  const url = FRONTIFY_URL(URL_USERS, URL_LOGIN);\n\n  const loginUser = async (userData: ILoginUserDTO): Promise<IUserAttached> => {\n    return await apiPost<ILoginUserDTO, IUserAttached>(url, userData).then(\n      (res) => {\n        return res.data;\n      }\n    );\n  };\n\n  return useMutation(loginUser, {\n    onSuccess: successAuthHandler,\n  });\n};\n","import { SessionAge } from \"linked-models/user/auth.consts\";\nimport { IUserAttached } from \"linked-models/user/user.model\";\nimport { useCurrentUser } from \"../useCurrentUser\";\nimport { SessionAgeLSKey } from \"./sessionAge.helper\";\n\nexport const useSuccessAuthHandler = () => {\n  const { setCurrentUser } = useCurrentUser();\n\n  return (user: IUserAttached) => {\n    setCurrentUser(user);\n    localStorage.setItem(\n      SessionAgeLSKey,\n      (new Date().getTime() + SessionAge).toString()\n    );\n  };\n};\n","import { styled } from \"@mui/material\";\n\nexport const StyledAlertWrapper = styled(\"div\")(({ theme }) => ({\n  fontSize: \"0.9rem\",\n  backgroundColor: theme.palette.background.paper,\n  padding: \"0.5rem\",\n  borderRadius: \"0.5rem\",\n  \"& strong\": {\n    cursor: \"pointer\",\n    fontWeight: 800,\n  },\n}));\n","import { useResendVerificationEmailMutation } from \"framework/authentication/mutations/resendVerificationEmail.mutation\";\nimport { useSnackbar } from \"framework/snackBar\";\nimport { TranslationKeys } from \"framework/translations/translatedTexts/translationKeys\";\nimport { memo } from \"react\";\nimport { UseFormSetError } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { ILoginFormValues } from \"../LoginForm\";\nimport { StyledAlertWrapper } from \"./styles\";\n\ninterface Props {\n  email: string;\n  setError: UseFormSetError<ILoginFormValues>;\n}\n\nconst VerifyAccountAlert = ({ email, setError }: Props): JSX.Element => {\n  const resendVerificationEmailMutation = useResendVerificationEmailMutation();\n  const { t } = useTranslation();\n  const { setSnackbar } = useSnackbar();\n\n  const handleResendVerificationEmail = () => {\n    if (!email) {\n      setError(\"email\", { message: t(TranslationKeys.EmailRequired) });\n      return;\n    }\n\n    resendVerificationEmailMutation.mutate(email, {\n      onSuccess: () => {\n        setSnackbar({ message: t(TranslationKeys.EmailSent) });\n      },\n    });\n  };\n\n  return (\n    <StyledAlertWrapper>\n      {t(TranslationKeys.EmailNotVerified)}\n      <strong onClick={handleResendVerificationEmail}>\n        {\" \"}\n        {t(TranslationKeys.ResendVerificationEmail)}\n      </strong>\n    </StyledAlertWrapper>\n  );\n};\n\nexport default memo(VerifyAccountAlert);\n","import { useMutation } from \"@tanstack/react-query\";\nimport { apiPost } from \"framework/asyncInteractions\";\nimport { FRONTIFY_URL } from \"framework/asyncInteractions/frontifyRequestUrl.helper\";\nimport {\n  URL_RESEND_EMAIL,\n  URL_USERS,\n  URL_VERIFY_ACCOUNT,\n} from \"linked-models/user/user.urls\";\n\nexport const useResendVerificationEmailMutation = () => {\n  const resendVerificationEmail = async (email: string): Promise<void> => {\n    const url = FRONTIFY_URL(\n      URL_USERS,\n      `${URL_VERIFY_ACCOUNT}${URL_RESEND_EMAIL}`\n    );\n    await apiPost<{ email: string }, void>(url, { email });\n  };\n\n  return useMutation(resendVerificationEmail);\n};\n","import { CircularProgress } from \"@mui/material\";\nimport { Button } from \"atomicComponents/atoms/Button\";\nimport { ControlledTextField } from \"atomicComponents/molecules/ControlledInputText\";\nimport { useForgetPasswordMutation } from \"framework/authentication/mutations/useForgetPassword.mutation\";\nimport { useLoginUserMutation } from \"framework/authentication/mutations/useLoginUser.mutation\";\nimport { Pages } from \"framework/routing/pages\";\nimport { useSnackbar } from \"framework/snackBar\";\nimport { TranslationKeys } from \"framework/translations/translatedTexts/translationKeys\";\nimport { Dispatch, SetStateAction, memo } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\nimport GoogleButton from \"../GoogleButton\";\nimport VerifyAccountAlert from \"../VerifyAccountAlert\";\nimport {\n  StyledForgetPassBtn,\n  StyledForm,\n  StyledGruppedButtons,\n} from \"../styles\";\n\nexport interface ILoginFormValues {\n  email: string;\n  password: string;\n}\n\nexport interface LoginFormProps {\n  defaultEmail?: string;\n  setIsRegistering: Dispatch<SetStateAction<boolean>>;\n}\n\nconst LoginForm = ({\n  setIsRegistering,\n  defaultEmail,\n}: LoginFormProps): JSX.Element => {\n  const { t } = useTranslation();\n  const { setSnackbar } = useSnackbar();\n  const loginUserMutation = useLoginUserMutation();\n  const forgetPasswordMutation = useForgetPasswordMutation();\n  const navigate = useNavigate();\n  const {\n    control,\n    setError,\n    getValues,\n    formState: { errors },\n    handleSubmit,\n  } = useForm<ILoginFormValues>({ defaultValues: { email: defaultEmail } });\n\n  const onSubmit = (data: ILoginFormValues) => {\n    if (!data.email) {\n      setError(\"email\", { message: t(TranslationKeys.EmailRequired) });\n      return;\n    }\n\n    if (!data.password) {\n      setError(\"password\", { message: t(TranslationKeys.PasswordRequired) });\n      return;\n    }\n\n    loginUserMutation.mutate(data, {\n      onSuccess: () => {\n        navigate(Pages.RemindersPage.path);\n        setSnackbar({ message: t(TranslationKeys.LoginSuccess) });\n      },\n      onError: (error) => {\n        if (error.response?.data === \"Email is not verified\") {\n          setError(\"root\", { message: t(TranslationKeys.EmailNotVerified) });\n        } else {\n          setSnackbar({\n            message: error.response?.data || error.message,\n            severity: \"error\",\n          });\n        }\n      },\n    });\n  };\n\n  const handleHorgetPassword = (\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ) => {\n    e.preventDefault();\n    const email = getValues(\"email\");\n\n    if (!email) {\n      setError(\"email\", { message: t(TranslationKeys.EmailRequired) });\n      return;\n    }\n\n    forgetPasswordMutation.mutate(email);\n  };\n\n  return (\n    <StyledForm onSubmit={handleSubmit(onSubmit)}>\n      <ControlledTextField\n        error={!!errors.email?.message}\n        helperText={errors.email?.message}\n        name={\"email\"}\n        control={control}\n        type=\"email\"\n        placeholder={t(TranslationKeys.Email)}\n      />\n      <ControlledTextField\n        error={!!errors.password?.message}\n        helperText={errors.password?.message}\n        name={\"password\"}\n        control={control}\n        type=\"password\"\n        placeholder={t(TranslationKeys.Password)}\n      />\n      {errors.root?.message && (\n        <VerifyAccountAlert email={getValues(\"email\")} setError={setError} />\n      )}\n      <StyledForgetPassBtn onClick={(e) => handleHorgetPassword(e)}>\n        {t(TranslationKeys.ForgetPassword)}\n      </StyledForgetPassBtn>\n      <Button type=\"submit\">\n        {loginUserMutation.isLoading && <CircularProgress size={\"20px\"} />}\n        {t(TranslationKeys.LoginButtonText)}\n      </Button>\n      <StyledGruppedButtons>\n        <GoogleButton />\n        <Button\n          onClick={() => {\n            setIsRegistering(true);\n          }}\n        >\n          {t(TranslationKeys.RegisterButtonText)}\n        </Button>\n      </StyledGruppedButtons>\n    </StyledForm>\n  );\n};\n\nexport default memo(LoginForm);\n","import { useMutation } from \"@tanstack/react-query\";\nimport { apiPost } from \"framework/asyncInteractions\";\nimport { FRONTIFY_URL } from \"framework/asyncInteractions/frontifyRequestUrl.helper\";\nimport { useSnackbar } from \"framework/snackBar\";\nimport { TranslationKeys } from \"framework/translations/translatedTexts/translationKeys\";\nimport { URL_FORGET_PASSWORD } from \"linked-models/user/user.urls\";\nimport { useTranslation } from \"react-i18next\";\n\nexport const useForgetPasswordMutation = () => {\n  const url = FRONTIFY_URL(URL_FORGET_PASSWORD);\n  const { setSnackbar } = useSnackbar();\n  const { t } = useTranslation();\n\n  const forgetPassword = async (email: string): Promise<void> => {\n    await apiPost<{ email: string }, void>(url, { email });\n  };\n\n  return useMutation(forgetPassword, {\n    onSuccess: () => {\n      setSnackbar({\n        severity: \"success\",\n        message: t(TranslationKeys.ForgetPasswordSuccess),\n      });\n    },\n    onError: () => {\n      setSnackbar({\n        severity: \"error\",\n        message: t(TranslationKeys.ForgetPasswordError),\n      });\n    },\n  });\n};\n","import { CircularProgress } from \"@mui/material\";\nimport { Button } from \"atomicComponents/atoms/Button\";\nimport { ControlledTextField } from \"atomicComponents/molecules/ControlledInputText\";\nimport { useRegisterUserMutation } from \"framework/authentication/mutations/useRegisterUser.mutation\";\nimport { Pages } from \"framework/routing/pages\";\nimport { useSnackbar } from \"framework/snackBar\";\nimport { TranslationKeys } from \"framework/translations/translatedTexts/translationKeys\";\nimport { useLocalisation } from \"framework/translations/useLocalisation.context\";\nimport { IRegisterUserDTO } from \"linked-models/user/user.dto\";\nimport { memo } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\nimport GoogleButton from \"../GoogleButton\";\nimport { LoginFormProps } from \"../LoginForm\";\nimport { StyledForm, StyledGruppedButtons } from \"../styles\";\n\ninterface IRegisterFormValues extends IRegisterUserDTO {\n  passwordRepeat: string;\n}\n\nconst RegisterContent = ({\n  setIsRegistering,\n  defaultEmail,\n}: LoginFormProps): JSX.Element => {\n  const { t } = useTranslation();\n  const { language } = useLocalisation();\n  const { setSnackbar } = useSnackbar();\n  const registerUserMutation = useRegisterUserMutation();\n  const navigate = useNavigate();\n  const {\n    control,\n    setError,\n    formState: { errors },\n    handleSubmit,\n  } = useForm<IRegisterFormValues>({ defaultValues: { email: defaultEmail } });\n\n  const onSubmit = (data: IRegisterFormValues) => {\n    if (!data.email) {\n      setError(\"email\", { message: t(TranslationKeys.EmailRequired) });\n      return;\n    }\n\n    if (!data.displayName) {\n      setError(\"displayName\", {\n        message: t(TranslationKeys.DisplayNameRequired),\n      });\n      return;\n    }\n\n    if (!data.password) {\n      setError(\"password\", { message: t(TranslationKeys.PasswordRequired) });\n      return;\n    }\n\n    if (!data.passwordRepeat)\n      setError(\"passwordRepeat\", {\n        message: t(TranslationKeys.PasswordRequired),\n      });\n\n    if (data.password !== data.passwordRepeat) {\n      setError(\"passwordRepeat\", {\n        message: t(TranslationKeys.PasswordsNoMatch),\n      });\n    }\n\n    registerUserMutation.mutate(\n      { ...data, language },\n      {\n        onSuccess: () => {\n          setIsRegistering(false);\n          navigate(Pages.LoginPage.path);\n          setSnackbar({ message: t(TranslationKeys.RegisterSuccess) });\n        },\n        onError: (error) => {\n          setSnackbar({\n            message: error.response?.data || error.message,\n            severity: \"error\",\n          });\n        },\n      }\n    );\n  };\n\n  return (\n    <StyledForm onSubmit={handleSubmit(onSubmit)}>\n      <ControlledTextField\n        name={\"displayName\"}\n        control={control}\n        placeholder={t(TranslationKeys.DisplayName)}\n      />\n      <ControlledTextField\n        name={\"email\"}\n        control={control}\n        type=\"email\"\n        error={!!errors.email?.message}\n        helperText={errors.email?.message}\n        placeholder={t(TranslationKeys.Email)}\n      />\n      <ControlledTextField\n        name={\"password\"}\n        control={control}\n        type=\"password\"\n        error={!!errors.password?.message}\n        helperText={errors.password?.message}\n        placeholder={t(TranslationKeys.Password)}\n      />\n      <ControlledTextField\n        name={\"passwordRepeat\"}\n        control={control}\n        type=\"password\"\n        error={!!errors.passwordRepeat?.message}\n        helperText={errors.passwordRepeat?.message}\n        placeholder={t(TranslationKeys.PasswordRepeat)}\n      />\n      <Button type=\"submit\">\n        {registerUserMutation.isLoading && <CircularProgress size={\"20px\"} />}\n        {t(TranslationKeys.RegisterButtonText)}\n      </Button>\n      <StyledGruppedButtons>\n        <GoogleButton />\n        <Button\n          onClick={() => {\n            setIsRegistering(false);\n          }}\n        >\n          {t(TranslationKeys.LoginButtonText)}\n        </Button>\n      </StyledGruppedButtons>\n    </StyledForm>\n  );\n};\n\nexport default memo(RegisterContent);\n","import { useMutation, UseMutationResult } from \"@tanstack/react-query\";\nimport { AxiosError } from \"axios\";\nimport { apiPost } from \"framework/asyncInteractions\";\nimport { FRONTIFY_URL } from \"framework/asyncInteractions/frontifyRequestUrl.helper\";\nimport { IRegisterUserDTO } from \"linked-models/user/user.dto\";\nimport { IUserAttached } from \"linked-models/user/user.model\";\nimport { URL_REGISTER, URL_USERS } from \"linked-models/user/user.urls\";\n\nexport const useRegisterUserMutation = (): UseMutationResult<\n  IUserAttached,\n  AxiosError<string>,\n  IRegisterUserDTO,\n  unknown\n> => {\n  const url = FRONTIFY_URL(URL_USERS, URL_REGISTER);\n\n  const registerUser = async (\n    userData: IRegisterUserDTO\n  ): Promise<IUserAttached> => {\n    return await apiPost<IRegisterUserDTO, IUserAttached>(url, userData).then(\n      (res) => res.data\n    );\n  };\n\n  return useMutation((userData: IRegisterUserDTO) => registerUser(userData));\n};\n","import { LAST_PAGE_LS_KEY } from \"atomicComponents/organisms/Header/helpers/LS.keys.const.helper\";\nimport { useCurrentUser } from \"framework/authentication/useCurrentUser\";\nimport { Pages } from \"framework/routing/pages\";\nimport { TranslationKeys } from \"framework/translations/translatedTexts/translationKeys\";\nimport { StyledLoginHeader } from \"pages/HomePage/components/TopSection/styles\";\nimport React, { Dispatch, SetStateAction, useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\nimport LoginForm from \"./LoginForm\";\nimport RegisterForm from \"./RegisterForm\";\nimport { StyledContentWrapper, StyledOuterWave, StyledWrapper } from \"./styles\";\n\ninterface LoginPanelProps {\n  defaultEmail?: string;\n  setIsRegistering: Dispatch<SetStateAction<boolean>>;\n  isRegistering: boolean;\n  disableAutoRedirect?: boolean;\n  children?: React.ReactNode;\n}\n\nexport const LoginPanel = ({\n  defaultEmail,\n  setIsRegistering,\n  isRegistering,\n  disableAutoRedirect,\n  children,\n}: LoginPanelProps): JSX.Element => {\n  const { t } = useTranslation();\n  const { currentUser } = useCurrentUser();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const lastPageFromLS = localStorage.getItem(LAST_PAGE_LS_KEY);\n    if (currentUser) navigate(lastPageFromLS ?? Pages.RemindersPage.path);\n    else if (isRegistering) navigate(Pages.RegisterPage.path);\n    else if (!disableAutoRedirect) navigate(Pages.LoginPage.path);\n  }, [currentUser, disableAutoRedirect, isRegistering, navigate]);\n\n  return (\n    <StyledWrapper>\n      <StyledOuterWave></StyledOuterWave>\n      <StyledContentWrapper>\n        <StyledLoginHeader variant=\"h5\">\n          {t(TranslationKeys.LoginPanelHeader)}\n        </StyledLoginHeader>\n        {children}\n        {isRegistering ? (\n          <RegisterForm\n            setIsRegistering={setIsRegistering}\n            defaultEmail={defaultEmail}\n          />\n        ) : (\n          <LoginForm\n            setIsRegistering={setIsRegistering}\n            defaultEmail={defaultEmail}\n          />\n        )}\n      </StyledContentWrapper>\n    </StyledWrapper>\n  );\n};\n","import { styled } from \"@mui/material\";\n\nexport const StyledAlert = styled(\"div\")(({ theme }) => ({\n  backgroundColor: theme.palette.background.paper,\n  color: theme.palette.primary.contrastText,\n  borderRadius: \"30px\",\n  width: 300,\n  padding: \"10px 20px\",\n  lineHeight: 1.5,\n  fontSize: 14,\n  \"& > h2\": {\n    fontSize: 18,\n    marginBottom: 10,\n  },\n  \"& > strong\": {\n    fontWeight: 700,\n    cursor: \"pointer\",\n    width: \"50px\",\n  },\n  \"& > svg\": {\n    color: theme.palette.primary.contrastText,\n  },\n}));\n","import { Skeleton, Typography } from \"@mui/material\";\nimport { TranslationKeys } from \"framework/translations/translatedTexts/translationKeys\";\nimport { memo } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useVerifyAccountMutation } from \"./mutations/useVerifyAccount.mutation\";\nimport { StyledAlert } from \"./styles\";\n\nconst VerifyAccountPanel = (): JSX.Element => {\n  const { t } = useTranslation();\n  const verifyAccountmutation = useVerifyAccountMutation();\n\n  const handleVerifyAccount = () => {\n    if (verifyAccountmutation.isLoading) return;\n    verifyAccountmutation.mutate(undefined);\n  };\n\n  return (\n    <StyledAlert>\n      <Typography variant=\"h2\">\n        {t(TranslationKeys.VerifyAccountTitle)}\n      </Typography>\n      {verifyAccountmutation.isSuccess ? (\n        <p>{t(TranslationKeys.VerifyAccountSuccess)}</p>\n      ) : (\n        <>\n          <p>{t(TranslationKeys.VerifyAccountDescription)} </p>\n          {verifyAccountmutation.isLoading ? (\n            <Skeleton width={70} height={22} />\n          ) : (\n            <strong onClick={handleVerifyAccount}>\n              {t(TranslationKeys.VerifyAccountTitle)}\n            </strong>\n          )}\n        </>\n      )}\n    </StyledAlert>\n  );\n};\n\nexport default memo(VerifyAccountPanel);\n","import { useMutation, UseMutationResult } from \"@tanstack/react-query\";\nimport { AxiosError } from \"axios\";\nimport { apiPost } from \"framework/asyncInteractions\";\nimport { FRONTIFY_URL } from \"framework/asyncInteractions/frontifyRequestUrl.helper\";\nimport { useCurrentUser } from \"framework/authentication/useCurrentUser\";\nimport {\n  URL_USER,\n  URL_USERS,\n  URL_VERIFY_ACCOUNT,\n} from \"linked-models/user/user.urls\";\n\nexport const useVerifyAccountMutation = (): UseMutationResult<\n  void,\n  AxiosError<string>,\n  undefined,\n  unknown\n> => {\n  const { currentUser } = useCurrentUser();\n  const url = FRONTIFY_URL(\n    URL_USERS,\n    URL_USER(currentUser?.id) + URL_VERIFY_ACCOUNT\n  );\n\n  const verifyAccount = async (): Promise<void> => {\n    return await apiPost<undefined, void>(url, undefined).then(\n      (res) => res.data\n    );\n  };\n\n  return useMutation(verifyAccount);\n};\n","import { useCurrentUser } from \"framework/authentication/useCurrentUser\";\nimport { Pages } from \"framework/routing/pages\";\nimport { TranslationKeys } from \"framework/translations/translatedTexts/translationKeys\";\nimport { LoginPanel } from \"pages/LoginPage/LoginPanel\";\nimport { memo, useEffect, useLayoutEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\nimport VerifyAccountPanel from \"./VerifyAccountPanel\";\n\ninterface Props {\n  showAccountVerifyPanel?: boolean;\n}\n\nconst LoginPage = ({ showAccountVerifyPanel }: Props): JSX.Element => {\n  const { t } = useTranslation();\n  const [searchParams] = useSearchParams();\n  const { currentUser } = useCurrentUser();\n  const [isRegistering, setIsRegistering] = useState(\n    window.location.href.includes(\"register\")\n  );\n  const navigate = useNavigate();\n  const email = searchParams.get(\"email\") || undefined;\n\n  useLayoutEffect(() => {\n    const title = `${t(TranslationKeys.PageTitleMain)} - ${\n      isRegistering\n        ? t(TranslationKeys.PageTitleSignUp)\n        : t(TranslationKeys.PageTitleSignIn)\n    }`;\n    document.title = title;\n  }),\n    [];\n\n  useEffect(() => {\n    if (currentUser) navigate(Pages.HomePage.path);\n  }, [currentUser, navigate]);\n\n  return (\n    <>\n      <LoginPanel\n        defaultEmail={email}\n        setIsRegistering={setIsRegistering}\n        isRegistering={isRegistering}\n        disableAutoRedirect={showAccountVerifyPanel}\n      >\n        {showAccountVerifyPanel && <VerifyAccountPanel />}\n      </LoginPanel>\n    </>\n  );\n};\n\nexport default memo(LoginPage);\n","export const SessionAge = 259200000; // 3 days\n\nexport const ExpiryParam = \"expiry\";\n"],"names":["StyledTopSection","styled","shouldForwardProp","prop","_ref","_ref2","theme","noGap","display","flexDirection","alignItems","justifyContent","minHeight","gap","textAlign","padding","width","_defineProperty","breakpoints","up","StyledLoginHeader","Typography","_ref3","color","palette","mode","secondary","contrastText","primary","StyledIntroWrapper","_ref4","zIndex","transform","fill","StyledDescription","_ref5","fontSize","marginTop","lineHeight","StyledButton","Button","_ref7","margin","StyledContentWrapper","overflow","backgroundColor","light","backgroundImage","concat","process","borderRadius","animation","StyledOuterWave","opacity","position","animationDelay","height","StyledWrapper","StyledForm","main","StyledGruppedButtons","flexWrap","flex","StyledForgetPassBtn","background","border","cursor","transition","textDecoration","useLoginUserMutation","successAuthHandler","setCurrentUser","useCurrentUser","user","localStorage","setItem","SessionAgeLSKey","Date","getTime","SessionAge","toString","useSuccessAuthHandler","url","FRONTIFY_URL","URL_USERS","URL_LOGIN","loginUser","_asyncToGenerator","_regeneratorRuntime","mark","_callee","userData","wrap","_context","prev","next","apiPost","then","res","data","abrupt","sent","stop","_x","apply","arguments","useMutation","onSuccess","StyledAlertWrapper","paper","fontWeight","VerifyAccountAlert","email","setError","resendVerificationEmailMutation","resendVerificationEmail","URL_VERIFY_ACCOUNT","URL_RESEND_EMAIL","useResendVerificationEmailMutation","t","useTranslation","setSnackbar","useSnackbar","_jsxs","children","TranslationKeys","EmailNotVerified","onClick","mutate","message","EmailSent","EmailRequired","ResendVerificationEmail","memo","LoginForm","_errors$email","_errors$email2","_errors$password","_errors$password2","_errors$root","setIsRegistering","defaultEmail","loginUserMutation","forgetPasswordMutation","URL_FORGET_PASSWORD","forgetPassword","severity","ForgetPasswordSuccess","onError","ForgetPasswordError","useForgetPasswordMutation","navigate","useNavigate","_useForm","useForm","defaultValues","control","getValues","errors","formState","handleSubmit","onSubmit","password","Pages","RemindersPage","path","LoginSuccess","error","_error$response","_error$response2","response","PasswordRequired","_jsx","ControlledTextField","helperText","name","type","placeholder","Email","Password","root","e","preventDefault","handleHorgetPassword","ForgetPassword","isLoading","CircularProgress","size","LoginButtonText","GoogleButton","RegisterButtonText","RegisterContent","_errors$passwordRepea","_errors$passwordRepea2","language","useLocalisation","registerUserMutation","URL_REGISTER","registerUser","useRegisterUserMutation","displayName","passwordRepeat","PasswordsNoMatch","_objectSpread","LoginPage","RegisterSuccess","DisplayNameRequired","DisplayName","PasswordRepeat","LoginPanel","isRegistering","disableAutoRedirect","currentUser","useEffect","lastPageFromLS","getItem","LAST_PAGE_LS_KEY","RegisterPage","variant","LoginPanelHeader","RegisterForm","StyledAlert","marginBottom","VerifyAccountPanel","verifyAccountmutation","URL_USER","id","verifyAccount","undefined","useVerifyAccountMutation","VerifyAccountTitle","isSuccess","VerifyAccountSuccess","_Fragment","VerifyAccountDescription","Skeleton","showAccountVerifyPanel","_useSearchParams","useSearchParams","searchParams","_slicedToArray","_useState","useState","window","location","href","includes","_useState2","get","useLayoutEffect","title","PageTitleMain","PageTitleSignUp","PageTitleSignIn","document","HomePage","ExpiryParam"],"sourceRoot":""}