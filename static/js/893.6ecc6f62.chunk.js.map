{"version":3,"file":"static/js/893.6ecc6f62.chunk.js","mappings":"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","sources":["framework/dialogs/components/TaskDialog/components/CollapsableNotifyForm.tsx","framework/dialogs/components/TaskDialog/styles.ts","framework/dialogs/components/TaskDialog/index.tsx","pages/SingleTodoListPage/mutations/createTask/createTask.mutation.ts","pages/SingleTodoListPage/mutations/editTask/editTask.mutation.ts"],"sourcesContent":["import { Collapse } from \"@mui/material\";\nimport { memo } from \"react\";\nimport { Control, useWatch } from \"react-hook-form\";\nimport { ITaskDialog } from \"../models/taskDialog.model\";\nimport NotifyForm from \"./NotifyForm\";\n\ninterface Props {\n  control: Control<ITaskDialog, any>;\n}\n\nconst CollapsableNotifyForm = ({ control }: Props): JSX.Element => {\n  const watch = useWatch<ITaskDialog>();\n  return (\n    <Collapse in={watch[\"notify\"]} timeout=\"auto\" unmountOnExit>\n      <NotifyForm control={control} />\n    </Collapse>\n  );\n};\n\nexport default memo(CollapsableNotifyForm);\n","import { styled } from \"@mui/material\";\n\nexport const StyledCheckboxesWrapper = styled(\"div\")({\n  display: \"flex\",\n});\n","import FlagCircleIcon from \"@mui/icons-material/FlagCircle\";\nimport PlayCircleOutlineIcon from \"@mui/icons-material/PlayCircleOutline\";\nimport { Typography } from \"@mui/material\";\nimport { Button } from \"atomicComponents/atoms/Button\";\nimport Dialog from \"atomicComponents/atoms/Dialog\";\nimport { ControlledCheckbox } from \"atomicComponents/molecules/ControlledCheckbox\";\nimport { ControlledTextField } from \"atomicComponents/molecules/ControlledInputText\";\nimport dayjs from \"dayjs\";\nimport { useDialogs } from \"framework/dialogs\";\nimport useAppDialogState from \"framework/dialogs/hooks/useAppDialogState\";\nimport { initialTaskDialog } from \"framework/dialogs/models/initialState.const\";\nimport { TranslationKeys } from \"framework/translations/translatedTexts/translationKeys\";\nimport { useCreateTaskMutation } from \"pages/SingleTodoListPage/mutations/createTask/createTask.mutation\";\nimport { useEditTaskInTodoListMutation } from \"pages/SingleTodoListPage/mutations/editTask/editTask.mutation\";\nimport { memo } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { StyledForm } from \"../TodoListDialog/styles\";\nimport CollapsableNotifyForm from \"./components/CollapsableNotifyForm\";\nimport DateTimePickerWithIcon from \"./components/DatePickerWithIcon\";\nimport { createNotifySelectParams } from \"./components/NotifyForm/helpers\";\nimport { ITaskDialog } from \"./models/taskDialog.model\";\nimport { StyledCheckboxesWrapper } from \"./styles\";\n\nconst TaskDialog = (): JSX.Element => {\n  const {\n    dialogsState: {\n      taskDialog: { editTaskData, todoListId, visible },\n    },\n    dialogsActions: { updateTaskDialog },\n  } = useDialogs();\n\n  const [open, onClose] = useAppDialogState(visible, () =>\n    updateTaskDialog(initialTaskDialog)\n  );\n\n  const defaultSelectsValues =\n    editTaskData?.notifyDate &&\n    createNotifySelectParams(\n      new Date(editTaskData?.notifyDate),\n      editTaskData?.startDate && new Date(editTaskData?.startDate),\n      editTaskData?.finishDate && new Date(editTaskData?.finishDate)\n    );\n\n  const defaultFormValues = {\n    text: editTaskData?.text || \"\",\n    startDate: editTaskData?.startDate || null,\n    finishDate: editTaskData?.finishDate || null,\n    minsAccordingToTimePoint:\n      defaultSelectsValues?.minsAccordingToTimePoint || 15,\n    beforeOrAfter: defaultSelectsValues?.beforeOrAfter || \"Before\",\n    timePoint: defaultSelectsValues?.timePoint || \"Start\",\n    notifyDate: editTaskData?.notifyDate || new Date(),\n    important: editTaskData?.important,\n    notify: !!editTaskData?.notifyDate,\n  };\n\n  const methods = useForm<ITaskDialog>({\n    defaultValues: defaultFormValues,\n  });\n\n  const createTaskMutation = useCreateTaskMutation();\n  const editTaskMutation = useEditTaskInTodoListMutation();\n  const { t } = useTranslation();\n\n  const onSubmit = (data: ITaskDialog) => {\n    if (editTaskData)\n      editTaskMutation.mutate({ todoListId, taskId: editTaskData.id, data });\n    else createTaskMutation.mutate({ todoListId, data });\n    onClose();\n  };\n\n  const { handleSubmit, control, getValues } = methods;\n\n  return (\n    <Dialog open={open} onClose={onClose}>\n      <FormProvider {...methods}>\n        <StyledForm onSubmit={handleSubmit(onSubmit)}>\n          <Typography variant=\"h4\">\n            {editTaskData\n              ? `${t(TranslationKeys.EditTask)}: ${editTaskData.text}`\n              : t(TranslationKeys.AddTask)}\n          </Typography>\n          <ControlledTextField\n            name={\"text\"}\n            control={control}\n            placeholder={t(TranslationKeys.TaskName)}\n          />\n          {[\n            {\n              Icon: <PlayCircleOutlineIcon />,\n              tooltipTitle: t(TranslationKeys.StartDate),\n              name: \"startDate\" as keyof ITaskDialog,\n              control,\n              maxDate: dayjs(getValues(\"startDate\")),\n            },\n            {\n              Icon: <FlagCircleIcon />,\n              tooltipTitle: t(TranslationKeys.FinishDate),\n              name: \"finishDate\" as keyof ITaskDialog,\n              control,\n              minDate: dayjs(getValues(\"finishDate\")),\n            },\n          ].map((props, index) => (\n            <DateTimePickerWithIcon key={index} {...props} />\n          ))}\n\n          <StyledCheckboxesWrapper>\n            <ControlledCheckbox\n              name={\"notify\"}\n              control={control}\n              label={t(TranslationKeys.NotifyMe)}\n            />\n            <ControlledCheckbox\n              name={\"important\"}\n              control={control}\n              label={t(TranslationKeys.TaskImportant)}\n            />\n          </StyledCheckboxesWrapper>\n          <CollapsableNotifyForm control={methods.control} />\n          <Button type=\"submit\">\n            {editTaskData\n              ? t(TranslationKeys.Save)\n              : t(TranslationKeys.AddTask)}\n          </Button>\n        </StyledForm>\n      </FormProvider>\n    </Dialog>\n  );\n};\n\nexport default memo(TaskDialog);\n","import { useMutation } from \"@tanstack/react-query\";\nimport { apiPost } from \"framework/asyncInteractions\";\nimport { FRONTIFY_URL } from \"framework/asyncInteractions/frontifyRequestUrl.helper\";\nimport { ITaskDTO, stringifyTaskDateFields } from \"linked-models/task/task.dto\";\nimport { ITask, ITaskAttached } from \"linked-models/task/task.model\";\nimport { URL_TODO_LIST_TASKS } from \"linked-models/task/task.urls\";\nimport useUpdateQueriesAfterCreatingTask from \"./useUpdateQueriesAfterCreatingTask\";\n\ninterface ICreateTaskInTodoListMutation {\n  todoListId: string;\n  data: ITask;\n}\n\nexport const useCreateTaskMutation = () => {\n  const updateQueriesAfterCreatingTask = useUpdateQueriesAfterCreatingTask();\n\n  const createTaskInTodoList = async (todoListId: string, data: ITask) => {\n    const url = FRONTIFY_URL(URL_TODO_LIST_TASKS(todoListId));\n    return apiPost<ITaskDTO, ITaskAttached>(\n      url,\n      stringifyTaskDateFields(data)\n    ).then((res) => res.data);\n  };\n\n  return useMutation(\n    ({ todoListId, data }: ICreateTaskInTodoListMutation) =>\n      createTaskInTodoList(todoListId, data),\n    {\n      onSuccess: updateQueriesAfterCreatingTask,\n    }\n  );\n};\n","import { useMutation } from \"@tanstack/react-query\";\nimport { apiPut } from \"framework/asyncInteractions\";\nimport { FRONTIFY_URL } from \"framework/asyncInteractions/frontifyRequestUrl.helper\";\nimport { ITaskDTO, stringifyTaskDateFields } from \"linked-models/task/task.dto\";\nimport { ITask, ITaskAttached } from \"linked-models/task/task.model\";\nimport { URL_TODO_LIST_TASK } from \"linked-models/task/task.urls\";\nimport useUpdateQueriesAfterEditingTask from \"./useUpdateQueriesAfterEditingTask\";\n\nexport const useEditTaskInTodoListMutation = () => {\n  const updateQueriesAfterEditingTask = useUpdateQueriesAfterEditingTask();\n\n  const editTaskInTodoList = async ({\n    todoListId,\n    taskId,\n    data,\n  }: {\n    todoListId: string;\n    taskId: string;\n    data: Partial<ITask>;\n  }) => {\n    return apiPut<Partial<ITaskDTO>, ITaskAttached>(\n      FRONTIFY_URL(URL_TODO_LIST_TASK(todoListId, taskId)),\n      stringifyTaskDateFields(data)\n    ).then((res) => res.data);\n  };\n\n  return useMutation(editTaskInTodoList, {\n    onSuccess: updateQueriesAfterEditingTask,\n  });\n};\n"],"names":["CollapsableNotifyForm","_ref","control","watch","useWatch","_jsx","Collapse","in","timeout","unmountOnExit","children","NotifyForm","memo","StyledCheckboxesWrapper","styled","display","TaskDialog","_useDialogs","useDialogs","_useDialogs$dialogsSt","dialogsState","taskDialog","editTaskData","todoListId","visible","updateTaskDialog","dialogsActions","_useAppDialogState","useAppDialogState","initialTaskDialog","_useAppDialogState2","_slicedToArray","open","onClose","defaultSelectsValues","notifyDate","createNotifySelectParams","Date","startDate","finishDate","defaultFormValues","text","minsAccordingToTimePoint","beforeOrAfter","timePoint","important","notify","methods","useForm","defaultValues","createTaskMutation","updateQueriesAfterCreatingTask","useUpdateQueriesAfterCreatingTask","createTaskInTodoList","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","url","wrap","_context","prev","next","FRONTIFY_URL","URL_TODO_LIST_TASKS","abrupt","apiPost","stringifyTaskDateFields","then","res","stop","_x","_x2","apply","arguments","useMutation","_ref2","onSuccess","useCreateTaskMutation","editTaskMutation","useEditTaskInTodoListMutation","t","useTranslation","handleSubmit","getValues","Dialog","FormProvider","_objectSpread","_jsxs","StyledForm","onSubmit","mutate","taskId","id","Typography","variant","concat","TranslationKeys","EditTask","AddTask","ControlledTextField","name","placeholder","TaskName","Icon","PlayCircleOutlineIcon","tooltipTitle","StartDate","maxDate","dayjs","FlagCircleIcon","FinishDate","minDate","map","props","index","DateTimePickerWithIcon","ControlledCheckbox","label","NotifyMe","TaskImportant","Button","type","Save","updateQueriesAfterEditingTask","useUpdateQueriesAfterEditingTask","editTaskInTodoList","apiPut","URL_TODO_LIST_TASK"],"sourceRoot":""}