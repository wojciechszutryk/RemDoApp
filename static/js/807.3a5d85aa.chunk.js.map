{"version":3,"file":"static/js/807.3a5d85aa.chunk.js","mappings":"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","sources":["pages/SingleTodoListPage/mutations/createTask/useUpdateQueriesAfterCreatingTask.ts","framework/dialogs/components/TaskDialog/components/CollapsableNotifyForm.tsx","framework/dialogs/components/TaskDialog/styles.ts","framework/dialogs/components/TaskDialog/index.tsx","pages/SingleTodoListPage/mutations/createTask/createTask.mutation.ts","pages/SingleTodoListPage/mutations/editTask/useUpdateQueriesAfterEditingTask.ts","pages/SingleTodoListPage/mutations/editTask/editTask.mutation.ts"],"sourcesContent":["import { useQueryClient } from \"@tanstack/react-query\";\nimport { useCurrentUser } from \"framework/authentication/useCurrentUser\";\nimport { ITaskAttached } from \"linked-models/task/task.model\";\nimport { IExtendedTodoListDto } from \"linked-models/todoList/todoList.dto\";\nimport {\n  PARAM_EXTENDED,\n  URL_TODO_LIST,\n  URL_TODO_LISTS,\n} from \"linked-models/todoList/todoList.urls\";\nimport { useCallback } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nconst useUpdateQueriesAfterCreatingTask = (\n  updateOnlyAllTodoListsData?: boolean\n) => {\n  const queryClient = useQueryClient();\n  const { currentUser } = useCurrentUser();\n  const { todoListId: todoListIdParam } = useParams();\n\n  return useCallback(\n    (createdTask: ITaskAttached) => {\n      const mappedTask = {\n        ...createdTask,\n        creator: currentUser!,\n      };\n\n      // update single todo list query data only on singletodolist page\n      if (todoListIdParam && !updateOnlyAllTodoListsData) {\n        queryClient.setQueryData(\n          [URL_TODO_LISTS, URL_TODO_LIST(todoListIdParam), PARAM_EXTENDED],\n          (prev?: IExtendedTodoListDto): IExtendedTodoListDto => {\n            if (!prev) return {} as IExtendedTodoListDto;\n            const todoListWithNewTask = {\n              ...prev,\n              tasks: [...prev.tasks, mappedTask],\n            };\n            return todoListWithNewTask;\n          }\n        );\n      }\n\n      // update all todo lists query data\n      queryClient.setQueryData(\n        [URL_TODO_LISTS, PARAM_EXTENDED],\n        (prev?: IExtendedTodoListDto[]): IExtendedTodoListDto[] => {\n          if (!prev) return [];\n          const todoList = prev.find((td) => td.id === createdTask.todoListId);\n          if (!todoList) return prev;\n          const todoListWithNewTask = {\n            ...todoList,\n            tasks: [...todoList.tasks, mappedTask],\n          };\n          return prev.map((td) =>\n            td.id === todoListWithNewTask.id ? todoListWithNewTask : td\n          );\n        }\n      );\n    },\n    [currentUser, queryClient, todoListIdParam]\n  );\n};\n\nexport default useUpdateQueriesAfterCreatingTask;\n","import { Collapse } from \"@mui/material\";\nimport { memo } from \"react\";\nimport { Control, useWatch } from \"react-hook-form\";\nimport { ITaskDialog } from \"../models/taskDialog.model\";\nimport NotifyForm from \"./NotifyForm\";\n\ninterface Props {\n  control: Control<ITaskDialog, any>;\n}\n\nconst CollapsableNotifyForm = ({ control }: Props): JSX.Element => {\n  const watch = useWatch<ITaskDialog>();\n  return (\n    <Collapse in={watch[\"notify\"]} timeout=\"auto\" unmountOnExit>\n      <NotifyForm control={control} />\n    </Collapse>\n  );\n};\n\nexport default memo(CollapsableNotifyForm);\n","import { styled } from \"@mui/material\";\n\nexport const StyledCheckboxesWrapper = styled(\"div\")({\n  display: \"flex\",\n});\n","import FlagCircleIcon from \"@mui/icons-material/FlagCircle\";\nimport PlayCircleOutlineIcon from \"@mui/icons-material/PlayCircleOutline\";\nimport { Typography } from \"@mui/material\";\nimport { Button } from \"atomicComponents/atoms/Button\";\nimport Dialog from \"atomicComponents/atoms/Dialog\";\nimport { ControlledCheckbox } from \"atomicComponents/molecules/ControlledCheckbox\";\nimport { ControlledTextField } from \"atomicComponents/molecules/ControlledInputText\";\nimport dayjs from \"dayjs\";\nimport { useDialogs } from \"framework/dialogs\";\nimport useAppDialogState from \"framework/dialogs/hooks/useAppDialogState\";\nimport { initialTaskDialog } from \"framework/dialogs/models/initialState.const\";\nimport { TranslationKeys } from \"framework/translations/translatedTexts/translationKeys\";\nimport { useCreateTaskMutation } from \"pages/SingleTodoListPage/mutations/createTask/createTask.mutation\";\nimport { useEditTaskInTodoListMutation } from \"pages/SingleTodoListPage/mutations/editTask/editTask.mutation\";\nimport { memo } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { StyledForm } from \"../TodoListDialog/styles\";\nimport CollapsableNotifyForm from \"./components/CollapsableNotifyForm\";\nimport DateTimePickerWithIcon from \"./components/DatePickerWithIcon\";\nimport { createNotifySelectParams } from \"./components/NotifyForm/helpers\";\nimport { ITaskDialog } from \"./models/taskDialog.model\";\nimport { StyledCheckboxesWrapper } from \"./styles\";\n\nconst TaskDialog = (): JSX.Element => {\n  const {\n    dialogsState: {\n      taskDialog: { editTaskData, todoListId, visible },\n    },\n    dialogsActions: { updateTaskDialog },\n  } = useDialogs();\n\n  const [open, onClose] = useAppDialogState(visible, () =>\n    updateTaskDialog(initialTaskDialog)\n  );\n\n  const defaultSelectsValues =\n    editTaskData?.notifyDate &&\n    createNotifySelectParams(\n      new Date(editTaskData?.notifyDate),\n      editTaskData?.startDate && new Date(editTaskData?.startDate),\n      editTaskData?.finishDate && new Date(editTaskData?.finishDate)\n    );\n\n  const defaultFormValues = {\n    text: editTaskData?.text || \"\",\n    startDate: editTaskData?.startDate || null,\n    finishDate: editTaskData?.finishDate || null,\n    minsAccordingToTimePoint:\n      defaultSelectsValues?.minsAccordingToTimePoint || 15,\n    beforeOrAfter: defaultSelectsValues?.beforeOrAfter || \"Before\",\n    timePoint: defaultSelectsValues?.timePoint || \"Start\",\n    notifyDate: editTaskData?.notifyDate || new Date(),\n    important: editTaskData?.important,\n    notify: !!editTaskData?.notifyDate,\n  };\n\n  const methods = useForm<ITaskDialog>({\n    defaultValues: defaultFormValues,\n  });\n\n  const createTaskMutation = useCreateTaskMutation();\n  const editTaskMutation = useEditTaskInTodoListMutation();\n  const { t } = useTranslation();\n\n  const onSubmit = (data: ITaskDialog) => {\n    if (editTaskData)\n      editTaskMutation.mutate({ todoListId, taskId: editTaskData.id, data });\n    else createTaskMutation.mutate({ todoListId, data });\n    onClose();\n  };\n\n  const { handleSubmit, control, getValues } = methods;\n\n  return (\n    <Dialog open={open} onClose={onClose}>\n      <FormProvider {...methods}>\n        <StyledForm onSubmit={handleSubmit(onSubmit)}>\n          <Typography variant=\"h4\">\n            {editTaskData\n              ? `${t(TranslationKeys.EditTask)}: ${editTaskData.text}`\n              : t(TranslationKeys.AddTask)}\n          </Typography>\n          <ControlledTextField\n            name={\"text\"}\n            control={control}\n            placeholder={t(TranslationKeys.TaskName)}\n          />\n          {[\n            {\n              Icon: <PlayCircleOutlineIcon />,\n              tooltipTitle: t(TranslationKeys.StartDate),\n              name: \"startDate\" as keyof ITaskDialog,\n              control,\n              maxDate: dayjs(getValues(\"startDate\")),\n            },\n            {\n              Icon: <FlagCircleIcon />,\n              tooltipTitle: t(TranslationKeys.FinishDate),\n              name: \"finishDate\" as keyof ITaskDialog,\n              control,\n              minDate: dayjs(getValues(\"finishDate\")),\n            },\n          ].map((props, index) => (\n            <DateTimePickerWithIcon key={index} {...props} />\n          ))}\n\n          <StyledCheckboxesWrapper>\n            <ControlledCheckbox\n              name={\"notify\"}\n              control={control}\n              label={t(TranslationKeys.NotifyMe)}\n            />\n            <ControlledCheckbox\n              name={\"important\"}\n              control={control}\n              label={t(TranslationKeys.TaskImportant)}\n            />\n          </StyledCheckboxesWrapper>\n          <CollapsableNotifyForm control={methods.control} />\n          <Button type=\"submit\">\n            {editTaskData\n              ? t(TranslationKeys.Save)\n              : t(TranslationKeys.AddTask)}\n          </Button>\n        </StyledForm>\n      </FormProvider>\n    </Dialog>\n  );\n};\n\nexport default memo(TaskDialog);\n","import { useMutation } from \"@tanstack/react-query\";\nimport { apiPost } from \"framework/asyncInteractions\";\nimport { FRONTIFY_URL } from \"framework/asyncInteractions/frontifyRequestUrl.helper\";\nimport { ITaskDTO, stringifyTaskDateFields } from \"linked-models/task/task.dto\";\nimport { ITask, ITaskAttached } from \"linked-models/task/task.model\";\nimport { URL_TODO_LIST_TASKS } from \"linked-models/task/task.urls\";\nimport useUpdateQueriesAfterCreatingTask from \"./useUpdateQueriesAfterCreatingTask\";\n\ninterface ICreateTaskInTodoListMutation {\n  todoListId: string;\n  data: ITask;\n}\n\nexport const useCreateTaskMutation = () => {\n  const updateQueriesAfterCreatingTask = useUpdateQueriesAfterCreatingTask();\n\n  const createTaskInTodoList = async (todoListId: string, data: ITask) => {\n    const url = FRONTIFY_URL(URL_TODO_LIST_TASKS(todoListId));\n    return apiPost<ITaskDTO, ITaskAttached>(\n      url,\n      stringifyTaskDateFields(data)\n    ).then((res) => res.data);\n  };\n\n  return useMutation(\n    ({ todoListId, data }: ICreateTaskInTodoListMutation) =>\n      createTaskInTodoList(todoListId, data),\n    {\n      onSuccess: updateQueriesAfterCreatingTask,\n    }\n  );\n};\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport { ITaskAttached } from \"linked-models/task/task.model\";\nimport { IExtendedTodoListDto } from \"linked-models/todoList/todoList.dto\";\nimport {\n  PARAM_EXTENDED,\n  URL_TODO_LIST,\n  URL_TODO_LISTS,\n} from \"linked-models/todoList/todoList.urls\";\nimport { useCallback } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nconst useUpdateQueriesAfterEditingTask = () => {\n  const queryClient = useQueryClient();\n  const { todoListId: todoListIdParam } = useParams();\n\n  return useCallback(\n    (updatedTask: ITaskAttached, { todoListId }: { todoListId: string }) => {\n      // update single todo list query data only on singletodolist page\n      if (todoListIdParam) {\n        queryClient.setQueryData(\n          [URL_TODO_LISTS, URL_TODO_LIST(todoListIdParam), PARAM_EXTENDED],\n          (prev?: IExtendedTodoListDto): IExtendedTodoListDto => {\n            if (!prev) return {} as IExtendedTodoListDto;\n            const todoListWithUpdatedTask = {\n              ...prev,\n              tasks: prev.tasks.map((t) =>\n                t.id === updatedTask.id ? { ...t, ...updatedTask } : t\n              ),\n            };\n            return todoListWithUpdatedTask;\n          }\n        );\n      }\n\n      // update all todo lists query data on todolists page\n      queryClient.setQueryData(\n        [URL_TODO_LISTS, PARAM_EXTENDED],\n        (prev?: IExtendedTodoListDto[]): IExtendedTodoListDto[] => {\n          if (!prev) return [];\n          const todoList = prev.find((td) => td.id === todoListId);\n          if (!todoList) return prev;\n          const todoListWithUpdatedTask = {\n            ...todoList,\n            tasks: todoList.tasks.map((t) =>\n              t.id === updatedTask.id ? { ...t, ...updatedTask } : t\n            ),\n          };\n          return prev.map((td) =>\n            td.id === todoListWithUpdatedTask.id ? todoListWithUpdatedTask : td\n          );\n        }\n      );\n    },\n    [queryClient, todoListIdParam]\n  );\n};\n\nexport default useUpdateQueriesAfterEditingTask;\n","import { useMutation } from \"@tanstack/react-query\";\nimport { apiPut } from \"framework/asyncInteractions\";\nimport { FRONTIFY_URL } from \"framework/asyncInteractions/frontifyRequestUrl.helper\";\nimport { ITaskDTO, stringifyTaskDateFields } from \"linked-models/task/task.dto\";\nimport { ITask, ITaskAttached } from \"linked-models/task/task.model\";\nimport { URL_TODO_LIST_TASK } from \"linked-models/task/task.urls\";\nimport useUpdateQueriesAfterEditingTask from \"./useUpdateQueriesAfterEditingTask\";\n\nexport const useEditTaskInTodoListMutation = () => {\n  const updateQueriesAfterEditingTask = useUpdateQueriesAfterEditingTask();\n\n  const editTaskInTodoList = async ({\n    todoListId,\n    taskId,\n    data,\n  }: {\n    todoListId: string;\n    taskId: string;\n    data: Partial<ITask>;\n  }) => {\n    return apiPut<Partial<ITaskDTO>, ITaskAttached>(\n      FRONTIFY_URL(URL_TODO_LIST_TASK(todoListId, taskId)),\n      stringifyTaskDateFields(data)\n    ).then((res) => res.data);\n  };\n\n  return useMutation(editTaskInTodoList, {\n    onSuccess: updateQueriesAfterEditingTask,\n  });\n};\n"],"names":["updateOnlyAllTodoListsData","queryClient","useQueryClient","currentUser","useCurrentUser","todoListIdParam","useParams","todoListId","useCallback","createdTask","mappedTask","_objectSpread","creator","setQueryData","URL_TODO_LISTS","URL_TODO_LIST","PARAM_EXTENDED","prev","tasks","concat","_toConsumableArray","todoList","find","td","id","todoListWithNewTask","map","CollapsableNotifyForm","_ref","control","watch","useWatch","_jsx","Collapse","in","timeout","unmountOnExit","children","NotifyForm","memo","StyledCheckboxesWrapper","styled","display","TaskDialog","_useDialogs","useDialogs","_useDialogs$dialogsSt","dialogsState","taskDialog","editTaskData","visible","updateTaskDialog","dialogsActions","_useAppDialogState","useAppDialogState","initialTaskDialog","_useAppDialogState2","_slicedToArray","open","onClose","defaultSelectsValues","notifyDate","createNotifySelectParams","Date","startDate","finishDate","defaultFormValues","text","minsAccordingToTimePoint","beforeOrAfter","timePoint","important","notify","methods","useForm","defaultValues","createTaskMutation","updateQueriesAfterCreatingTask","useUpdateQueriesAfterCreatingTask","createTaskInTodoList","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","url","wrap","_context","next","FRONTIFY_URL","URL_TODO_LIST_TASKS","abrupt","apiPost","stringifyTaskDateFields","then","res","stop","_x","_x2","apply","arguments","useMutation","_ref2","onSuccess","useCreateTaskMutation","editTaskMutation","useEditTaskInTodoListMutation","t","useTranslation","handleSubmit","getValues","Dialog","FormProvider","_jsxs","StyledForm","onSubmit","mutate","taskId","Typography","variant","TranslationKeys","EditTask","AddTask","ControlledTextField","name","placeholder","TaskName","Icon","PlayCircleOutlineIcon","tooltipTitle","StartDate","maxDate","dayjs","FlagCircleIcon","FinishDate","minDate","props","index","DateTimePickerWithIcon","ControlledCheckbox","label","NotifyMe","TaskImportant","Button","type","Save","updatedTask","todoListWithUpdatedTask","updateQueriesAfterEditingTask","useUpdateQueriesAfterEditingTask","editTaskInTodoList","apiPut","URL_TODO_LIST_TASK"],"sourceRoot":""}